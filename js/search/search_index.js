var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AddBaseEntity1761088297244.html",[0,0.126,1,2.473]],["body/classes/AddBaseEntity1761088297244.html",[0,0.125,1,4.112,2,1.337,3,0.32,4,0.284,5,0.284,6,4.686,7,2.799,8,2.495,9,5.17,10,0.394,11,1.198,12,1.767,13,1.701,14,3.04,15,2.809,16,4.538,17,4.538,18,0.498,19,0.027,20,0.816,21,3.825,22,2.799,23,1.183,24,3.32,25,4.538,26,6.35,27,3.32,28,1.585,29,1.585,30,1.701,31,2.409,32,4.538,33,3.32,34,0.433,35,1.439,36,0.32,37,2.296,38,3.32,39,2.2,40,3.826,41,3.826,42,1.967,43,3.32,44,4.306,45,2.799,46,3.825,47,4.538,48,2.799,49,2.122,50,4.538,51,4.538,52,1.337,53,2.2,54,4.538,55,3.32,56,2.799,57,3.32,58,3.32,59,2.799,60,3.32,61,0.018,62,0.018]],["title/modules/AppModule.html",[63,1.691,64,2.215]],["body/modules/AppModule.html",[0,0.123,3,0.315,4,0.281,5,0.281,12,1.559,19,0.028,34,0.814,36,0.315,61,0.018,62,0.018,63,2.598,64,4.246,65,1.801,66,1.969,67,2.423,68,2.423,69,1.969,70,3.799,71,2.171,72,2.761,73,2.761,74,2.761,75,3.597,76,3.29,77,3.597,78,3.327,79,2.423,80,2.171,81,3.275,82,3.327,83,1.969,84,0.865,85,2.423,86,1.801,87,3.275,88,2.171,89,4.496,90,2.761,91,3.275,92,2.761,93,3.327,94,1.969,95,3.275,96,3.275,97,3.275,98,3.275,99,1.657,100,3.275,101,3.275,102,2.423,103,3.275,104,2.761,105,4.329,106,3.275,107,4.329,108,2.423,109,3.275,110,3.275,111,3.275,112,3.275,113,2.761,114,3.275,115,2.423,116,3.275,117,3.275]],["title/controllers/AuthController.html",[118,2.215,119,2.215]],["body/controllers/AuthController.html",[0,0.116,3,0.298,4,0.265,5,0.265,10,0.367,12,1.512,13,1.619,18,0.416,19,0.027,23,1.14,28,1.739,29,1.739,30,1.867,34,0.74,36,0.298,61,0.017,62,0.017,83,1.859,84,0.816,88,2.049,104,3.643,105,3.643,107,3.643,108,2.288,113,3.643,115,2.288,118,2.049,119,2.864,120,2.607,121,3.092,122,2.288,123,4.32,124,3.643,125,3.643,126,3.092,127,2.329,128,3.092,129,3.092,130,4.32,131,2.607,132,2.974,133,4.32,134,3.092,135,3.092,136,2.607,137,2.974,138,3.092,139,3.092,140,3.092,141,3.092,142,2.607,143,3.092,144,4.32,145,4.98,146,2.607,147,2.607,148,2.049,149,3.092,150,2.739,151,2.607,152,3.092,153,2.288,154,1.446,155,3.092,156,3.092,157,1.883,158,3.092,159,3.092,160,3.092,161,3.092,162,3.092,163,3.092,164,3.092,165,3.092,166,2.288,167,2.288,168,1.859,169,2.288,170,2.864,171,3.197,172,4.32,173,3.092,174,3.092,175,3.092]],["title/modules/AuthModule.html",[63,1.691,75,2.01]],["body/modules/AuthModule.html",[0,0.11,3,0.281,4,0.25,5,0.25,19,0.028,34,0.826,36,0.281,61,0.016,62,0.016,63,2.443,65,1.607,66,1.756,67,2.162,68,2.162,69,1.756,70,3.89,71,3.2,75,3.97,76,3.173,78,3.071,79,2.162,80,1.936,82,3.573,83,1.756,84,0.771,85,3.573,86,1.607,92,2.463,115,3.071,119,3.2,150,3.173,151,2.463,176,2.463,177,2.921,178,2.463,179,2.463,180,3.844,181,3.173,182,3.173,183,2.92,184,2.921,185,3.2,186,2.921,187,2.162,188,4.828,189,1.936,190,2.921,191,2.921,192,2.921,193,2.162,194,2.921,195,2.921,196,2.921,197,1.936,198,2.921,199,2.463,200,2.463,201,2.463,202,2.921,203,2.921,204,2.463,205,2.921,206,2.463,207,2.921,208,2.921]],["title/injectables/AuthService.html",[150,1.838,209,0.947]],["body/injectables/AuthService.html",[0,0.079,3,0.202,4,0.18,5,0.18,10,0.249,12,1.205,13,1.216,14,2.585,15,2.699,18,0.382,19,0.028,20,0.976,23,0.908,28,1.386,29,1.386,30,1.216,31,2.309,34,0.737,36,0.202,37,2.859,42,1.406,49,2.089,52,1.946,53,1.39,61,0.013,62,0.013,84,0.554,102,2.401,124,4.073,125,2.736,131,2.736,132,2.585,136,2.736,137,2.696,142,1.768,146,1.768,147,1.768,150,2.182,154,2.089,157,1.687,181,2.809,182,2.93,183,2.696,193,1.551,209,0.919,210,0.98,211,1.768,212,1.784,213,2.097,214,2.097,215,2.097,216,2.097,217,2.097,218,2.008,219,1.768,220,2.736,221,2.097,222,2.097,223,1.784,224,1.551,225,1.551,226,2.15,227,2.097,228,2.15,229,2.097,230,2.097,231,2.097,232,2.921,233,2.089,234,2.097,235,2.097,236,2.097,237,2.097,238,2.785,239,3.244,240,2.097,241,2.936,242,2.748,243,2.097,244,3.244,245,3.968,246,2.097,247,2.386,248,2.097,249,2.097,250,2.097,251,3.305,252,2.097,253,2.097,254,2.097,255,2.097,256,1.551,257,2.097,258,2.097,259,3.244,260,2.097,261,2.401,262,1.39,263,2.401,264,2.097,265,2.097,266,2.097,267,2.097,268,1.551,269,2.097,270,3.244,271,1.39,272,2.736,273,3.244,274,2.097,275,2.097,276,2.097,277,3.244,278,2.097,279,2.097,280,2.097,281,2.097,282,2.097,283,1.551,284,2.736,285,2.097,286,2.097,287,2.097]],["title/classes/BaseAbstractRepostitory.html",[0,0.126,288,2.01]],["body/classes/BaseAbstractRepostitory.html",[0,0.041,2,0.438,3,0.105,4,0.093,5,0.093,8,1.038,10,0.129,11,0.498,12,1.638,13,0.707,14,3.226,15,2.931,18,0.526,19,0.028,20,0.912,23,1.252,28,1.883,29,1.883,30,1.99,31,2.557,34,0.326,35,0.471,36,0.105,37,2.729,39,1.251,42,2.22,61,0.007,62,0.007,84,0.287,154,1.17,157,1.855,212,0.598,218,1.877,232,0.55,233,0.508,238,2.641,241,0.804,247,3.012,256,2.947,262,2.458,271,0.72,288,1.135,289,0.804,290,1.376,291,2.795,292,1.98,293,1.396,294,1.658,295,1.396,296,1.396,297,1.396,298,1.396,299,1.396,300,1.396,301,1.591,302,1.396,303,1.658,304,2.242,305,1.396,306,2.242,307,1.591,308,2.458,309,1.851,310,1.087,311,1.504,312,2.211,313,1.087,314,1.251,315,3.046,316,1.087,317,1.98,318,1.251,319,3.67,320,1.087,321,2.43,322,2.795,323,1.251,324,1.087,325,1.251,326,1.604,327,1.087,328,1.251,329,2.929,330,1.087,331,1.251,332,1.087,333,1.251,334,2.64,335,1.087,336,0.804,337,1.251,338,1.087,339,1.251,340,1.087,341,1.251,342,1.087,343,1.251,344,1.396,345,4.717,346,1.087,347,1.396,348,1.396,349,1.251,350,1.087,351,0.804,352,1.251,353,1.087,354,1.251,355,1.087,356,1.251,357,1.087,358,1.251,359,1.98,360,1.087,361,0.916,362,0.267,363,0.72,364,0.804,365,0.916,366,0.916,367,0.916,368,0.916,369,3.708,370,3.127,371,2.109,372,3.359,373,3.708,374,0.916,375,0.916,376,0.916,377,0.916,378,0.916,379,1.591,380,1.851,381,0.916,382,0.916,383,2.109,384,0.916,385,0.916,386,2.519,387,0.916,388,0.916,389,0.916,390,1.591,391,0.916,392,1.591,393,1.591,394,1.591,395,0.916,396,0.916,397,0.916,398,0.916,399,2.519,400,0.916,401,1.591,402,1.591,403,3.127,404,1.591,405,0.916,406,1.591,407,0.916,408,2.109,409,0.916,410,0.916,411,0.916,412,0.916,413,0.72,414,0.916,415,0.804,416,1.591,417,0.916,418,0.916,419,0.916,420,0.916,421,0.916]],["title/classes/BaseAuthDTO.html",[0,0.126,422,2.01]],["body/classes/BaseAuthDTO.html",[0,0.23,2,1.698,3,0.406,4,0.361,5,0.361,10,0.5,11,1.402,18,0.406,19,0.027,20,1.5,23,0.965,34,0.55,36,0.511,49,2.717,52,2.138,61,0.021,62,0.021,127,1.971,132,2.133,137,2.133,422,3.667,423,3.519,424,2.794,425,3.119,426,4.216,427,3.928,428,4.514,429,3.667,430,3.928,431,2.318,432,1.99]],["title/classes/BaseEntity.html",[0,0.126,433,2.215]],["body/classes/BaseEntity.html",[0,0.145,2,1.553,3,0.371,4,0.33,5,0.33,10,0.457,11,1.324,18,0.589,19,0.027,21,4.366,23,1.275,34,0.503,35,1.671,36,0.371,42,2.415,45,4.698,46,4.366,48,4.698,61,0.02,62,0.02,127,2.606,326,2.019,364,2.853,433,3.323,434,3.251,435,4.975,436,3.856,437,6.27,438,3.856,439,5.572,440,3.856,441,3.856,442,5.014,443,3.856,444,5.014,445,5.014]],["title/interfaces/BaseInterfaceRepository.html",[290,1.838,362,0.822]],["body/interfaces/BaseInterfaceRepository.html",[3,0.212,4,0.188,5,0.188,10,0.261,12,1.892,13,1.261,18,0.6,19,0.027,20,1.281,23,1.426,28,2.175,29,2.175,30,2.335,31,2.859,34,0.287,35,0.953,36,0.212,39,2.231,42,1.459,61,0.013,62,0.013,290,1.851,292,2.231,293,2.49,294,2.231,295,2.49,296,2.49,297,2.49,298,2.49,299,2.49,300,2.49,302,2.49,303,2.231,304,2.231,305,2.49,306,2.231,312,3.025,314,2.231,315,3.875,317,2.71,318,2.231,319,4.246,321,2.863,322,3.591,323,2.231,325,2.231,326,2.097,328,2.231,329,3.591,331,2.231,333,2.231,334,3.591,336,1.627,337,2.231,339,2.231,341,2.231,343,1.457,349,2.231,351,1.627,352,2.231,354,2.231,356,2.231,358,2.231,359,2.71,362,0.541,446,1.028,447,1.854,448,2.199,449,2.199,450,2.199,451,2.199,452,2.199,453,2.199,454,2.199,455,2.199,456,2.199,457,2.199,458,2.199,459,2.199,460,2.199,461,2.199,462,2.199]],["title/injectables/BcryptProvider.html",[181,1.838,209,0.947]],["body/injectables/BcryptProvider.html",[0,0.143,3,0.367,4,0.326,5,0.326,10,0.452,12,1.51,13,1.864,15,2.922,18,0.479,19,0.027,23,1.138,28,1.737,29,1.737,30,1.864,31,2.545,34,0.722,36,0.367,37,2.516,61,0.02,62,0.02,84,1.005,154,1.78,157,1.737,181,2.735,209,1.408,210,1.78,232,1.927,463,3.21,464,4.973,465,4.973,466,4.973,467,3.53,468,3.807,469,4.973,470,4.973,471,3.53,472,3.807,473,3.807,474,3.807,475,3.21,476,3.807,477,3.807,478,3.807,479,3.807,480,3.807,481,3.807,482,3.807]],["title/interfaces/ClassConstructor.html",[362,0.822,483,2.01]],["body/interfaces/ClassConstructor.html",[0,0.193,3,0.385,4,0.342,5,0.342,8,2.197,18,0.494,19,0.028,34,0.78,36,0.494,61,0.02,62,0.02,84,1.055,99,2.021,153,2.956,157,1.979,168,2.402,233,1.868,321,2.197,362,0.983,446,1.868,483,3.407,484,2.648,485,3.368,486,4.326,487,3.796,488,4.326,489,4.326,490,2.956,491,3.368,492,3.368,493,3.368,494,2.956,495,3.368,496,2.956,497,2.956,498,3.368,499,3.368,500,2.648,501,2.956,502,3.368,503,3.368,504,3.368,505,3.368,506,3.368]],["title/classes/CompareBcryptDTO.html",[0,0.126,467,2.01]],["body/classes/CompareBcryptDTO.html",[0,0.22,2,1.728,3,0.413,4,0.368,5,0.368,10,0.509,11,1.417,18,0.517,19,0.027,20,1.51,23,1.229,34,0.559,36,0.517,52,2.359,61,0.021,62,0.021,127,2.51,251,4.335,429,3.8,431,2.359,432,2.012,467,3.227,471,3.691,507,3.174,508,4.29,509,2.844,510,4.29]],["title/injectables/CustomThrottlerGuard.html",[77,2.01,209,0.947]],["body/injectables/CustomThrottlerGuard.html",[0,0.155,3,0.398,4,0.354,5,0.354,10,0.49,12,1.254,13,1.964,15,2.692,18,0.398,19,0.027,23,0.945,28,1.442,29,1.442,30,1.548,31,2.272,34,0.683,36,0.398,61,0.021,62,0.021,77,3.151,84,1.09,88,2.737,99,2.09,157,1.83,209,1.484,210,1.931,238,2.09,291,3.815,309,3.056,432,1.964,487,4.48,511,3.483,512,5.756,513,5.241,514,5.241,515,4.13,516,5.241,517,4.13,518,2.737,519,4.13]],["title/modules/DatabaseModule.html",[63,1.691,76,1.838]],["body/modules/DatabaseModule.html",[0,0.126,3,0.323,4,0.288,5,0.288,18,0.323,19,0.028,34,0.786,36,0.323,52,1.352,61,0.018,62,0.018,63,2.313,65,1.846,71,2.224,76,2.514,82,3.383,83,2.018,84,0.886,85,3.383,86,2.514,99,1.698,157,1.172,185,3.7,199,2.83,206,2.83,238,1.698,242,1.569,326,1.352,518,2.224,520,3.356,521,3.356,522,2.483,523,2.83,524,2.83,525,3.356,526,3.356,527,6.167,528,5.199,529,3.356,530,3.356,531,3.356,532,3.356,533,3.356,534,3.356,535,3.356,536,3.356,537,3.356,538,3.356,539,3.356,540,3.356,541,2.83,542,3.356,543,3.356,544,2.483,545,3.383,546,5.583,547,3.356,548,3.356,549,3.356,550,3.356,551,3.356,552,3.356,553,2.83,554,3.356,555,3.356,556,4.572]],["title/interfaces/HasId.html",[362,0.822,363,2.215]],["body/interfaces/HasId.html",[0,0.059,3,0.152,4,0.135,5,0.135,8,0.867,10,0.187,11,0.682,14,2.933,15,2.633,18,0.152,19,0.028,20,0.635,31,2.441,34,0.428,35,0.683,36,0.152,37,3.001,42,2.513,61,0.01,62,0.01,84,0.416,154,0.737,157,2.049,218,1.662,232,0.797,233,0.737,238,2.933,241,1.166,247,3.385,256,3.52,262,2.985,271,1.044,288,0.947,289,1.166,290,1.421,291,2.176,292,1.712,294,1.044,303,1.044,304,2.176,306,2.176,307,1.329,308,2.517,309,1.166,311,1.553,314,1.044,315,2.517,317,1.044,318,1.044,319,3.153,321,1.806,322,2.517,323,1.044,325,1.044,326,1.688,328,1.044,329,2.779,331,1.044,333,1.044,334,2.176,337,1.044,339,1.044,341,1.044,343,1.044,344,1.166,345,4.899,347,1.166,348,1.166,349,1.044,352,1.044,354,1.044,356,1.044,358,1.044,359,1.712,361,1.329,362,0.388,363,1.712,364,1.166,365,1.329,366,1.329,367,1.329,368,1.329,369,4.166,370,3.798,371,2.769,372,4.011,373,4.166,374,1.329,375,1.329,376,1.329,377,1.329,378,1.329,379,2.179,380,2.43,381,1.329,382,1.329,383,2.769,384,1.329,385,1.329,386,3.203,387,1.329,388,1.329,389,1.329,390,2.179,391,1.329,392,2.179,393,2.179,394,2.179,395,1.329,396,1.329,397,1.329,398,1.329,399,3.203,400,1.329,401,2.179,402,2.179,403,3.798,404,2.179,405,1.329,406,2.179,407,1.329,408,2.769,409,1.329,410,1.329,411,1.329,412,1.329,413,1.044,414,1.329,415,1.166,416,2.179,417,1.329,418,1.329,419,1.329,420,1.329,421,1.329,446,0.737]],["title/classes/HashBcryptDTO.html",[0,0.126,471,2.01]],["body/classes/HashBcryptDTO.html",[0,0.225,2,1.817,3,0.434,4,0.387,5,0.387,10,0.535,11,1.462,18,0.434,19,0.027,20,1.474,23,1.033,34,0.588,36,0.533,52,2.413,61,0.022,62,0.022,127,2.11,251,3.339,429,3.757,431,2.482,432,1.691,467,2.713,471,3.603,507,3.339,557,4.513]],["title/injectables/JwtAuthGuard.html",[148,2.215,209,0.947]],["body/injectables/JwtAuthGuard.html",[0,0.182,3,0.465,4,0.414,5,0.414,19,0.027,34,0.753,36,0.465,61,0.023,62,0.023,84,1.277,148,3.828,189,3.205,209,1.635,210,2.261,432,2.165,558,4.077,559,5.775,560,4.835]],["title/interfaces/JwtPayload.html",[223,1.838,362,0.822]],["body/interfaces/JwtPayload.html",[3,0.451,4,0.402,5,0.402,10,0.556,11,1.496,18,0.546,19,0.026,20,1.498,36,0.451,42,2.744,49,2.96,61,0.022,62,0.022,223,3.117,326,2.454,362,1.153,446,2.191,561,3.952,562,3.952]],["title/injectables/JwtProvider.html",[182,1.838,209,0.947]],["body/injectables/JwtProvider.html",[0,0.129,3,0.329,4,0.293,5,0.293,10,0.406,12,1.595,13,1.736,14,3.067,18,0.506,19,0.027,20,1.384,23,1.202,28,1.834,29,1.834,30,1.736,34,0.734,36,0.329,61,0.018,62,0.018,84,0.904,86,1.882,154,2.166,157,1.618,182,2.548,185,4.018,187,2.532,201,2.886,204,2.886,209,1.312,210,1.6,212,2.548,223,3.409,224,2.532,225,2.532,232,2.344,238,2.344,283,3.428,563,2.886,564,4.633,565,4.633,566,2.886,567,6.199,568,3.422,569,4.633,570,3.422,571,4.633,572,3.422,573,4.633,574,4.633,575,3.422,576,4.633,577,3.422]],["title/injectables/JwtStrategy.html",[180,2.01,209,0.947]],["body/injectables/JwtStrategy.html",[0,0.097,3,0.247,4,0.22,5,0.22,10,0.305,12,1.149,13,1.418,14,2.272,15,2.316,18,0.364,19,0.027,23,0.866,28,1.321,29,1.321,30,0.963,31,1.114,34,0.764,35,1.114,36,0.247,37,1.915,42,1.946,44,1.902,52,1.035,53,2.508,61,0.015,62,0.015,84,0.679,86,1.413,102,2.8,122,1.902,154,2.1,157,1.568,166,1.902,167,1.902,168,1.545,169,1.902,170,1.703,171,1.902,180,2.275,183,2.889,185,3.66,189,1.703,193,1.902,197,3.499,209,1.072,210,1.202,212,2.081,218,2.272,219,2.167,220,3.19,223,2.903,224,1.902,225,1.902,232,2.889,233,2.1,238,2.272,242,2.917,247,2.275,262,1.703,268,1.902,271,1.703,272,3.19,283,3.665,326,1.035,380,2.8,415,1.902,432,1.418,553,2.167,566,2.167,578,2.167,579,3.783,580,2.57,581,3.783,582,2.57,583,2.57,584,2.57,585,3.783,586,2.167,587,2.167,588,2.57,589,2.57,590,2.57,591,2.57,592,2.57,593,2.57,594,2.57,595,2.57,596,2.57,597,2.57,598,2.57,599,2.57,600,3.783,601,2.57,602,2.57,603,3.783,604,2.57,605,3.783,606,2.57,607,2.57,608,2.57,609,2.57,610,2.57,611,2.57,612,2.57,613,2.57,614,2.57,615,2.57,616,2.57,617,2.57,618,2.57,619,2.57]],["title/classes/LoginDTO.html",[0,0.126,132,1.691]],["body/classes/LoginDTO.html",[0,0.226,2,1.619,3,0.387,4,0.345,5,0.345,10,0.477,11,1.36,18,0.496,19,0.027,20,1.524,23,1.179,34,0.524,36,0.496,49,2.658,52,2.414,61,0.02,62,0.02,127,2.409,132,2.607,137,2.035,422,3.726,423,3.415,424,2.665,425,2.975,427,3.812,428,4.436,429,3.604,430,3.812,431,2.211,432,2.131,509,2.665,620,4.021,621,4.021,622,3.391]],["title/interfaces/LoginResponse.html",[226,2.215,362,0.822]],["body/interfaces/LoginResponse.html",[3,0.438,4,0.39,5,0.39,10,0.539,11,1.469,18,0.579,19,0.026,20,1.608,36,0.438,61,0.022,62,0.022,226,3.688,261,4.636,263,4.636,284,5.283,326,2.421,362,1.118,446,2.126,623,3.834]],["title/classes/RegisterDTO.html",[0,0.126,137,1.691]],["body/classes/RegisterDTO.html",[0,0.226,2,1.619,3,0.387,4,0.345,5,0.345,10,0.477,11,1.36,18,0.496,19,0.027,20,1.524,23,1.179,34,0.524,36,0.496,49,2.658,52,2.414,61,0.02,62,0.02,127,2.409,132,2.035,137,2.607,422,3.726,423,3.415,424,2.665,425,2.975,427,3.812,428,4.436,429,3.604,430,3.812,431,2.211,432,2.131,509,2.665,622,3.391,624,4.021,625,4.021]],["title/interfaces/RegisterResponse.html",[228,2.215,362,0.822]],["body/interfaces/RegisterResponse.html",[3,0.453,4,0.403,5,0.403,10,0.558,11,1.5,18,0.547,19,0.026,20,1.501,36,0.453,61,0.022,62,0.022,228,3.765,261,4.69,263,4.69,326,2.458,362,1.157,446,2.2,626,3.967]],["title/classes/SerializerInterceptor.html",[0,0.126,500,2.215]],["body/classes/SerializerInterceptor.html",[0,0.179,2,1.435,3,0.343,4,0.305,5,0.305,8,2.617,10,0.422,12,1.445,13,1.784,18,0.59,19,0.027,23,1.089,28,1.662,29,1.662,30,1.335,34,0.746,36,0.458,61,0.019,62,0.019,84,0.941,99,1.803,153,2.636,157,1.872,168,3.222,212,1.959,233,1.666,321,1.959,362,0.876,483,2.861,484,2.361,485,3.004,486,4.519,487,4.233,488,4.823,489,4.519,490,2.636,491,3.004,492,3.004,493,3.004,494,2.636,495,3.004,496,2.636,497,2.636,498,3.004,499,3.004,500,3.154,501,3.522,502,4.013,503,3.004,504,3.004,505,3.004,506,3.004,627,4.759,628,3.562,629,3.562,630,3.562,631,3.562]],["title/entities/User.html",[242,1.563,311,2.01]],["body/entities/User.html",[0,0.138,3,0.352,4,0.313,5,0.313,10,0.434,11,1.279,12,1.111,18,0.595,19,0.027,20,1.422,23,1.243,34,0.632,35,1.586,36,0.352,41,3.085,44,3.585,46,3.585,49,2.54,52,2.187,53,3.6,56,4.085,61,0.019,62,0.019,83,2.2,99,2.926,127,2.54,242,2.265,311,2.913,432,1.371,433,3.211,435,4.085,544,2.707,632,3.085,633,3.659,634,4.844,635,3.659,636,4.844,637,5.781,638,5.781,639,5.781,640,3.659,641,3.659,642,5.431,643,4.844,644,3.659]],["title/injectables/UserRepository.html",[183,1.691,209,0.947]],["body/injectables/UserRepository.html",[0,0.064,3,0.163,4,0.145,5,0.145,8,0.932,10,0.201,11,0.724,12,1.845,13,1.027,14,3.274,15,3.016,18,0.59,19,0.027,20,1.071,23,1.402,28,2.122,29,2.122,30,2.258,31,2.556,34,0.608,35,0.734,36,0.163,37,0.857,39,1.816,42,1.188,49,1.854,61,0.011,62,0.011,84,0.447,99,0.857,154,1.614,157,0.592,183,2.006,209,0.776,210,0.792,212,1.507,218,1.746,232,0.857,242,1.281,247,1.019,268,1.254,288,3.71,291,2.628,292,1.816,293,2.028,294,1.816,295,2.028,296,2.028,297,2.028,298,2.028,299,2.028,300,2.028,301,2.311,302,2.028,303,1.816,304,1.816,305,2.028,306,1.816,308,2.886,312,2.554,314,1.123,315,3.088,317,2.287,318,1.123,319,3.743,321,2.562,322,2.628,323,1.123,325,1.123,326,1.597,328,1.123,329,2.628,331,1.123,333,1.123,334,2.628,336,1.254,337,1.123,339,1.123,341,1.123,343,1.123,344,1.254,345,3.222,347,1.254,348,1.254,349,1.123,351,1.254,352,1.123,354,1.123,356,1.123,358,1.123,359,1.816,369,1.254,373,1.254,432,1.027,509,3.992,522,1.254,523,1.429,645,1.429,646,2.741,647,1.694,648,1.694,649,2.741,650,1.694,651,1.694,652,1.694,653,1.694,654,1.694,655,1.694,656,1.694,657,1.694,658,1.694,659,1.694,660,1.694,661,1.694,662,1.694,663,1.694,664,1.694,665,1.694,666,1.694,667,1.694,668,1.694,669,1.694,670,1.816,671,1.694,672,1.694,673,1.694,674,1.694,675,1.694,676,1.694]],["title/interfaces/UserRepositoryInterface.html",[362,0.822,670,2.215]],["body/interfaces/UserRepositoryInterface.html",[3,0.449,4,0.4,5,0.4,18,0.449,19,0.027,34,0.737,36,0.449,61,0.022,62,0.022,166,3.454,167,3.454,168,2.807,169,3.454,170,3.094,171,3.454,242,2.183,290,3.345,362,1.148,432,2.119,446,2.183,587,3.936,670,3.748,677,3.936,678,4.668,679,4.668,680,4.668]],["title/coverage.html",[681,3.373]],["body/coverage.html",[0,0.228,1,2.008,5,0.232,6,2.288,7,2.288,18,0.379,19,0.027,40,2.288,61,0.016,62,0.016,69,1.631,77,1.631,93,2.008,94,2.785,118,1.798,119,1.798,120,2.288,132,1.373,137,1.373,148,1.798,150,1.492,180,1.631,181,1.492,182,1.492,183,1.373,209,1.644,211,2.288,218,1.373,223,1.492,226,1.798,228,1.798,233,1.269,242,1.269,288,1.631,289,2.913,290,1.492,311,1.631,362,1.428,363,1.798,413,4.532,422,1.631,423,3.07,424,3.07,433,1.798,434,2.288,447,2.288,463,2.288,467,1.631,471,1.631,483,1.631,484,3.07,496,4.164,500,1.798,507,2.913,511,2.288,558,2.288,561,2.288,562,2.288,563,2.288,578,2.288,623,2.288,626,2.288,632,2.288,645,2.288,670,1.798,677,2.288,681,2.008,682,2.288,683,2.713,684,2.713,685,5.628,686,5.082,687,5.947,688,6.364,689,2.713,690,2.288,691,2.713,692,2.713,693,3.993,694,2.288,695,2.288,696,2.288,697,3.936,698,3.07,699,2.288,700,2.713,701,2.288,702,2.713]],["title/dependencies.html",[66,2.416,703,2.355]],["body/dependencies.html",[0,0.199,19,0.027,35,1.821,61,0.021,62,0.021,66,2.526,84,1.109,86,2.31,88,2.785,90,3.543,187,3.109,189,2.785,197,2.785,431,2.31,475,3.543,490,3.109,494,3.109,522,3.109,586,4.467,704,6.092,705,4.201,706,4.201,707,4.201,708,4.201,709,4.201,710,4.201,711,4.201,712,4.201,713,4.201,714,4.201,715,4.201,716,4.201,717,4.201,718,4.201,719,4.201,720,4.201,721,4.201,722,4.201,723,4.201,724,4.201,725,4.201,726,4.201]],["title/miscellaneous/functions.html",[727,1.536,728,3.389]],["body/miscellaneous/functions.html",[10,0.497,12,1.848,18,0.586,19,0.025,28,2.125,29,2.125,61,0.021,62,0.021,69,3.483,93,3.911,94,2.517,200,3.53,483,3.178,484,2.775,497,3.098,501,3.098,690,4.457,693,3.098,694,4.885,695,4.457,696,4.457,698,3.504,727,2.303,728,3.53,729,5.131,730,4.187,731,3.098,732,4.187,733,6.085,734,5.286,735,4.187,736,4.187,737,5.286]],["title/index.html",[10,0.396,738,3.343]],["body/index.html",[4,0.224,19,0.026,59,2.2,61,0.015,62,0.015,80,3.679,170,1.729,308,1.729,518,1.729,524,2.2,545,2.83,681,1.93,682,3.225,739,2.609,740,2.609,741,4.529,742,3.825,743,2.609,744,2.609,745,2.609,746,2.609,747,3.825,748,2.2,749,4.529,750,2.609,751,4.988,752,2.609,753,4.988,754,5.883,755,2.609,756,5.736,757,2.609,758,2.609,759,3.825,760,2.609,761,2.609,762,4.529,763,2.609,764,3.825,765,2.609,766,2.609,767,2.609,768,2.609,769,2.609,770,4.988,771,5.883,772,4.681,773,3.825,774,2.609,775,2.609,776,2.609,777,2.609,778,2.609,779,5.551,780,3.825,781,4.988,782,2.609,783,3.825,784,2.609,785,2.609,786,3.825,787,5.311,788,4.988,789,2.609,790,3.825,791,2.609,792,2.609,793,2.609,794,2.609,795,4.988,796,2.609,797,2.609,798,2.609,799,2.609,800,2.609,801,3.825,802,2.609,803,2.609,804,2.609,805,2.609,806,2.609,807,3.825,808,2.609,809,2.609,810,2.609,811,3.825,812,2.609,813,2.609,814,4.206,815,3.825,816,2.609,817,2.609,818,2.609,819,2.609,820,2.609,821,2.609,822,2.609,823,2.609,824,3.825,825,2.609,826,2.2,827,2.609,828,2.609,829,4.529,830,2.609,831,2.609,832,2.609,833,2.609,834,2.609,835,2.609,836,3.825,837,2.609,838,2.609,839,2.609,840,2.609,841,2.609,842,3.825,843,2.609,844,2.609,845,2.609,846,3.825,847,3.825,848,2.609,849,2.609,850,2.609,851,2.609,852,2.609,853,2.609,854,2.609,855,2.609,856,2.609,857,2.609,858,2.2,859,2.609,860,2.609,861,2.609,862,2.609,863,2.609,864,2.609,865,2.2]],["title/modules.html",[65,2.507]],["body/modules.html",[19,0.023,61,0.023,62,0.023,64,3.337,65,2.769,75,3.027,76,2.769,814,4.988,826,4.246,866,5.915,867,5.915,868,6.281,869,5.035]],["title/overview.html",[870,3.844]],["body/overview.html",[2,1.543,19,0.026,61,0.02,62,0.02,63,1.939,64,4.284,65,2.107,66,2.303,67,2.835,68,2.835,69,2.303,70,2.835,71,2.539,72,3.231,73,3.231,74,3.231,75,4.087,76,3.237,77,3.34,78,3.695,79,2.835,80,2.539,108,2.835,118,2.539,150,3.055,176,3.231,178,3.231,179,3.231,180,3.833,181,3.055,182,3.055,183,2.811,210,1.792,413,2.539,446,1.792,544,2.835,870,3.231,871,4.993,872,4.993,873,3.831]],["title/properties.html",[11,1.061,703,2.355]],["body/properties.html",[11,1.352,19,0.027,61,0.024,62,0.024,748,4.317,858,4.317,865,4.317,874,5.12,875,5.12,876,5.12]],["title/routes.html",[877,3.844]],["body/routes.html",[19,0.024,61,0.024,62,0.024,877,4.506]],["title/miscellaneous/typealiases.html",[727,1.536,878,4.019]],["body/miscellaneous/typealiases.html",[10,0.607,18,0.493,19,0.024,61,0.024,62,0.024,94,3.078,698,3.959,701,5.037,727,2.816,731,3.788,879,5.12,880,5.12]],["title/miscellaneous/variables.html",[727,1.536,881,3.389]],["body/miscellaneous/variables.html",[10,0.487,19,0.026,20,1.009,21,3.861,22,4.4,61,0.021,62,0.021,94,2.466,122,3.861,197,3.459,218,2.904,233,1.918,518,2.719,541,3.459,545,3.861,693,3.035,698,3.459,699,4.4,727,2.256,729,3.459,731,3.035,772,3.459,881,3.459,882,4.102,883,4.102,884,4.102,885,4.102,886,4.102,887,4.102,888,4.102,889,4.102,890,4.102,891,4.102,892,4.102,893,4.102,894,4.102,895,4.102,896,4.102,897,4.102,898,4.102,899,5.218,900,4.102,901,4.102,902,4.102,903,4.102,904,4.102,905,4.102,906,4.102,907,4.102,908,4.102,909,4.102,910,4.102,911,4.102,912,4.102,913,4.102]]],"invertedIndex":[["",{"_index":19,"title":{},"body":{"classes/AddBaseEntity1761088297244.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseAbstractRepostitory.html":{},"classes/BaseAuthDTO.html":{},"classes/BaseEntity.html":{},"interfaces/BaseInterfaceRepository.html":{},"injectables/BcryptProvider.html":{},"interfaces/ClassConstructor.html":{},"classes/CompareBcryptDTO.html":{},"injectables/CustomThrottlerGuard.html":{},"modules/DatabaseModule.html":{},"interfaces/HasId.html":{},"classes/HashBcryptDTO.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtProvider.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDTO.html":{},"interfaces/LoginResponse.html":{},"classes/RegisterDTO.html":{},"interfaces/RegisterResponse.html":{},"classes/SerializerInterceptor.html":{},"entities/User.html":{},"injectables/UserRepository.html":{},"interfaces/UserRepositoryInterface.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"routes.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":413,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{},"coverage.html":{},"overview.html":{}}}],["0.0.1",{"_index":875,"title":{},"body":{"properties.html":{}}}],["0.14.2",{"_index":713,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":722,"title":{},"body":{"dependencies.html":{}}}],["0.3.27",{"_index":724,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":712,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":716,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":688,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":691,"title":{},"body":{"coverage.html":{}}}],["0/19",{"_index":692,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":686,"title":{},"body":{"coverage.html":{}}}],["0/20",{"_index":689,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":687,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":685,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":871,"title":{},"body":{"overview.html":{}}}],["100",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["1000",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["10000",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["11.0.0",{"_index":710,"title":{},"body":{"dependencies.html":{}}}],["11.0.1",{"_index":704,"title":{},"body":{"dependencies.html":{}}}],["11.0.5",{"_index":706,"title":{},"body":{"dependencies.html":{}}}],["12",{"_index":478,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["17.2.3",{"_index":715,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["200",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{}}}],["201",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{}}}],["255",{"_index":639,"title":{},"body":{"entities/User.html":{}}}],["3",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"overview.html":{}}}],["3000",{"_index":910,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4.0.1",{"_index":717,"title":{},"body":{"dependencies.html":{}}}],["4.0.2",{"_index":705,"title":{},"body":{"dependencies.html":{}}}],["4.1.12",{"_index":726,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{}}}],["6.0.0",{"_index":711,"title":{},"body":{"dependencies.html":{}}}],["6.4.0",{"_index":709,"title":{},"body":{"dependencies.html":{}}}],["60000",{"_index":113,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{}}}],["7",{"_index":872,"title":{},"body":{"overview.html":{}}}],["7.8.1",{"_index":723,"title":{},"body":{"dependencies.html":{}}}],["8.16.3",{"_index":719,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":873,"title":{},"body":{"overview.html":{}}}],["__",{"_index":617,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["___",{"_index":618,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["abstract",{"_index":364,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"classes/BaseEntity.html":{},"interfaces/HasId.html":{}}}],["access",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{}}}],["accesstoken",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/LoginResponse.html":{}}}],["addbaseentity.ts",{"_index":7,"title":{},"body":{"classes/AddBaseEntity1761088297244.html":{},"coverage.html":{}}}],["addbaseentity.ts:12",{"_index":27,"title":{},"body":{"classes/AddBaseEntity1761088297244.html":{}}}],["addbaseentity.ts:4",{"_index":24,"title":{},"body":{"classes/AddBaseEntity1761088297244.html":{}}}],["addbaseentity.ts:6",{"_index":33,"title":{},"body":{"classes/AddBaseEntity1761088297244.html":{}}}],["addbaseentity1761088297244",{"_index":1,"title":{"classes/AddBaseEntity1761088297244.html":{}},"body":{"classes/AddBaseEntity1761088297244.html":{},"coverage.html":{}}}],["alias",{"_index":700,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":879,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allowing",{"_index":802,"title":{},"body":{"index.html":{}}}],["amazing",{"_index":852,"title":{},"body":{"index.html":{}}}],["api",{"_index":913,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app",{"_index":734,"title":{},"body":{"miscellaneous/functions.html":{}}}],["app_guard",{"_index":89,"title":{},"body":{"modules/AppModule.html":{}}}],["application",{"_index":772,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["applications",{"_index":747,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":64,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["args",{"_index":495,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializerInterceptor.html":{}}}],["asserts",{"_index":611,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["async",{"_index":15,"title":{},"body":{"classes/AddBaseEntity1761088297244.html":{},"injectables/AuthService.html":{},"classes/BaseAbstractRepostitory.html":{},"injectables/BcryptProvider.html":{},"injectables/CustomThrottlerGuard.html":{},"interfaces/HasId.html":{},"injectables/JwtStrategy.html":{},"injectables/UserRepository.html":{}}}],["attempt",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["auth.dto",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["auth.dto.ts",{"_index":424,"title":{},"body":{"classes/BaseAuthDTO.html":{},"classes/LoginDTO.html":{},"classes/RegisterDTO.html":{},"coverage.html":{}}}],["auth.dto.ts:16",{"_index":625,"title":{},"body":{"classes/RegisterDTO.html":{}}}],["auth.dto.ts:22",{"_index":621,"title":{},"body":{"classes/LoginDTO.html":{}}}],["auth.dto.ts:9",{"_index":426,"title":{},"body":{"classes/BaseAuthDTO.html":{}}}],["auth:user",{"_index":674,"title":{},"body":{"injectables/UserRepository.html":{}}}],["authcontroller",{"_index":119,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":560,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":559,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":75,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":858,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":150,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["autoloadentities",{"_index":555,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["available",{"_index":869,"title":{},"body":{"modules.html":{}}}],["await",{"_index":37,"title":{},"body":{"classes/AddBaseEntity1761088297244.html":{},"injectables/AuthService.html":{},"classes/BaseAbstractRepostitory.html":{},"injectables/BcryptProvider.html":{},"interfaces/HasId.html":{},"injectables/JwtStrategy.html":{},"injectables/UserRepository.html":{}}}],["aws",{"_index":790,"title":{},"body":{"index.html":{}}}],["backers",{"_index":853,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('unable",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{}}}],["baseabstractrepostitory",{"_index":288,"title":{"classes/BaseAbstractRepostitory.html":{}},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{},"injectables/UserRepository.html":{},"coverage.html":{}}}],["baseabstractrepostitory:101",{"_index":663,"title":{},"body":{"injectables/UserRepository.html":{}}}],["baseabstractrepostitory:112",{"_index":654,"title":{},"body":{"injectables/UserRepository.html":{}}}],["baseabstractrepostitory:122",{"_index":662,"title":{},"body":{"injectables/UserRepository.html":{}}}],["baseabstractrepostitory:131",{"_index":658,"title":{},"body":{"injectables/UserRepository.html":{}}}],["baseabstractrepostitory:140",{"_index":666,"title":{},"body":{"injectables/UserRepository.html":{}}}],["baseabstractrepostitory:173",{"_index":651,"title":{},"body":{"injectables/UserRepository.html":{}}}],["baseabstractrepostitory:182",{"_index":655,"title":{},"body":{"injectables/UserRepository.html":{}}}],["baseabstractrepostitory:192",{"_index":661,"title":{},"body":{"injectables/UserRepository.html":{}}}],["baseabstractrepostitory:20",{"_index":667,"title":{},"body":{"injectables/UserRepository.html":{}}}],["baseabstractrepostitory:28",{"_index":664,"title":{},"body":{"injectables/UserRepository.html":{}}}],["baseabstractrepostitory:39",{"_index":665,"title":{},"body":{"injectables/UserRepository.html":{}}}],["baseabstractrepostitory:50",{"_index":652,"title":{},"body":{"injectables/UserRepository.html":{}}}],["baseabstractrepostitory:54",{"_index":653,"title":{},"body":{"injectables/UserRepository.html":{}}}],["baseabstractrepostitory:58",{"_index":659,"title":{},"body":{"injectables/UserRepository.html":{}}}],["baseabstractrepostitory:74",{"_index":657,"title":{},"body":{"injectables/UserRepository.html":{}}}],["baseabstractrepostitory:83",{"_index":660,"title":{},"body":{"injectables/UserRepository.html":{}}}],["baseabstractrepostitory:92",{"_index":656,"title":{},"body":{"injectables/UserRepository.html":{}}}],["baseauthdto",{"_index":422,"title":{"classes/BaseAuthDTO.html":{}},"body":{"classes/BaseAuthDTO.html":{},"classes/LoginDTO.html":{},"classes/RegisterDTO.html":{},"coverage.html":{}}}],["baseauthdto:9",{"_index":622,"title":{},"body":{"classes/LoginDTO.html":{},"classes/RegisterDTO.html":{}}}],["based",{"_index":785,"title":{},"body":{"index.html":{}}}],["baseentity",{"_index":433,"title":{"classes/BaseEntity.html":{}},"body":{"classes/BaseEntity.html":{},"entities/User.html":{},"coverage.html":{}}}],["baseinterfacerepository",{"_index":290,"title":{"interfaces/BaseInterfaceRepository.html":{}},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/BaseInterfaceRepository.html":{},"interfaces/HasId.html":{},"interfaces/UserRepositoryInterface.html":{},"coverage.html":{}}}],["bcrypt",{"_index":475,"title":{},"body":{"injectables/BcryptProvider.html":{},"dependencies.html":{}}}],["bcrypt.provider",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcryptdto",{"_index":469,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcryptdto.hashedpassword",{"_index":482,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcryptprovider",{"_index":181,"title":{"injectables/BcryptProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"coverage.html":{},"overview.html":{}}}],["blocked",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{}}}],["board",{"_index":845,"title":{},"body":{"index.html":{}}}],["body",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{}}}],["bootstrap",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":868,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":866,"title":{},"body":{"modules.html":{}}}],["building",{"_index":742,"title":{},"body":{"index.html":{}}}],["callhandler",{"_index":488,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializerInterceptor.html":{}}}],["catch",{"_index":373,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{},"injectables/UserRepository.html":{}}}],["channel",{"_index":817,"title":{},"body":{"index.html":{}}}],["character",{"_index":50,"title":{},"body":{"classes/AddBaseEntity1761088297244.html":{}}}],["check",{"_index":779,"title":{},"body":{"index.html":{}}}],["class",{"_index":0,"title":{"classes/AddBaseEntity1761088297244.html":{},"classes/BaseAbstractRepostitory.html":{},"classes/BaseAuthDTO.html":{},"classes/BaseEntity.html":{},"classes/CompareBcryptDTO.html":{},"classes/HashBcryptDTO.html":{},"classes/LoginDTO.html":{},"classes/RegisterDTO.html":{},"classes/SerializerInterceptor.html":{}},"body":{"classes/AddBaseEntity1761088297244.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseAbstractRepostitory.html":{},"classes/BaseAuthDTO.html":{},"classes/BaseEntity.html":{},"injectables/BcryptProvider.html":{},"interfaces/ClassConstructor.html":{},"classes/CompareBcryptDTO.html":{},"injectables/CustomThrottlerGuard.html":{},"modules/DatabaseModule.html":{},"interfaces/HasId.html":{},"classes/HashBcryptDTO.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtProvider.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDTO.html":{},"classes/RegisterDTO.html":{},"classes/SerializerInterceptor.html":{},"entities/User.html":{},"injectables/UserRepository.html":{},"coverage.html":{},"dependencies.html":{}}}],["classconstructor",{"_index":483,"title":{"interfaces/ClassConstructor.html":{}},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializerInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AddBaseEntity1761088297244.html":{},"classes/BaseAbstractRepostitory.html":{},"classes/BaseAuthDTO.html":{},"classes/BaseEntity.html":{},"classes/CompareBcryptDTO.html":{},"classes/HashBcryptDTO.html":{},"classes/LoginDTO.html":{},"classes/RegisterDTO.html":{},"classes/SerializerInterceptor.html":{},"overview.html":{}}}],["clicks",{"_index":801,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":784,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":176,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":178,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":177,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":179,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["column",{"_index":642,"title":{},"body":{"entities/User.html":{}}}],["column({type",{"_index":636,"title":{},"body":{"entities/User.html":{}}}],["come",{"_index":808,"title":{},"body":{"index.html":{}}}],["compare",{"_index":473,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["compare(bcryptdto.password",{"_index":481,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["comparebcryptdto",{"_index":467,"title":{"classes/CompareBcryptDTO.html":{}},"body":{"injectables/BcryptProvider.html":{},"classes/CompareBcryptDTO.html":{},"classes/HashBcryptDTO.html":{},"coverage.html":{}}}],["comparepasswords",{"_index":464,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["comparepasswords(bcryptdto",{"_index":466,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["condition",{"_index":387,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{}}}],["config",{"_index":200,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/functions.html":{}}}],["config.get('jwt_expires_in",{"_index":205,"title":{},"body":{"modules/AuthModule.html":{}}}],["config.get('jwt_secret",{"_index":202,"title":{},"body":{"modules/AuthModule.html":{}}}],["configmodule",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{}}}],["configmodule.forroot",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":185,"title":{},"body":{"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"injectables/JwtProvider.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('db_host_dev",{"_index":531,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('db_host_prod",{"_index":532,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('db_name_dev",{"_index":542,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('db_name_prod",{"_index":543,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('db_password_dev",{"_index":539,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('db_password_prod",{"_index":540,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('db_port_dev",{"_index":534,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('db_port_prod",{"_index":535,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('db_username_dev",{"_index":537,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('db_username_prod",{"_index":538,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('jwt_secret",{"_index":593,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get('node_env",{"_index":528,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["const",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{},"classes/BaseAbstractRepostitory.html":{},"injectables/CustomThrottlerGuard.html":{},"modules/DatabaseModule.html":{},"interfaces/HasId.html":{},"injectables/JwtProvider.html":{},"injectables/JwtStrategy.html":{}}}],["constraint",{"_index":54,"title":{},"body":{"classes/AddBaseEntity1761088297244.html":{}}}],["constructor",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{},"classes/BaseAbstractRepostitory.html":{},"injectables/JwtProvider.html":{},"injectables/JwtStrategy.html":{},"classes/SerializerInterceptor.html":{},"injectables/UserRepository.html":{}}}],["constructor(bcryptprovider",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(configservice",{"_index":566,"title":{},"body":{"injectables/JwtProvider.html":{},"injectables/JwtStrategy.html":{}}}],["constructor(dto",{"_index":628,"title":{},"body":{"classes/SerializerInterceptor.html":{}}}],["constructor(entity",{"_index":307,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{}}}],["constructor(private",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ClassConstructor.html":{},"classes/SerializerInterceptor.html":{}}}],["constructor(userrepository",{"_index":647,"title":{},"body":{"injectables/UserRepository.html":{}}}],["contex",{"_index":631,"title":{},"body":{"classes/SerializerInterceptor.html":{}}}],["context",{"_index":309,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"injectables/CustomThrottlerGuard.html":{},"interfaces/HasId.html":{}}}],["controller",{"_index":118,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"coverage.html":{},"overview.html":{}}}],["controller('auth",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{}}}],["controllers",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["controllers/auth.controller",{"_index":191,"title":{},"body":{"modules/AuthModule.html":{}}}],["count",{"_index":292,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/BaseInterfaceRepository.html":{},"interfaces/HasId.html":{},"injectables/UserRepository.html":{}}}],["count(options",{"_index":314,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/BaseInterfaceRepository.html":{},"interfaces/HasId.html":{},"injectables/UserRepository.html":{}}}],["courses",{"_index":823,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":681,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":39,"title":{},"body":{"classes/AddBaseEntity1761088297244.html":{},"classes/BaseAbstractRepostitory.html":{},"interfaces/BaseInterfaceRepository.html":{},"injectables/UserRepository.html":{}}}],["create(data",{"_index":318,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/BaseInterfaceRepository.html":{},"interfaces/HasId.html":{},"injectables/UserRepository.html":{}}}],["created",{"_index":408,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{}}}],["createdat",{"_index":45,"title":{},"body":{"classes/AddBaseEntity1761088297244.html":{},"classes/BaseEntity.html":{}}}],["createdatecolumn",{"_index":444,"title":{},"body":{"classes/BaseEntity.html":{}}}],["createdatecolumn({type",{"_index":436,"title":{},"body":{"classes/BaseEntity.html":{}}}],["createloginresponse(payload",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{}}}],["createmany",{"_index":293,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/BaseInterfaceRepository.html":{},"injectables/UserRepository.html":{}}}],["createmany(data",{"_index":323,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/BaseInterfaceRepository.html":{},"interfaces/HasId.html":{},"injectables/UserRepository.html":{}}}],["createregisterresponse",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{}}}],["credentials",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{}}}],["current_timestamp",{"_index":437,"title":{},"body":{"classes/BaseEntity.html":{}}}],["customthrottlerguard",{"_index":77,"title":{"injectables/CustomThrottlerGuard.html":{}},"body":{"modules/AppModule.html":{},"injectables/CustomThrottlerGuard.html":{},"coverage.html":{},"overview.html":{}}}],["data",{"_index":321,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/BaseInterfaceRepository.html":{},"interfaces/ClassConstructor.html":{},"interfaces/HasId.html":{},"classes/SerializerInterceptor.html":{},"injectables/UserRepository.html":{}}}],["data.id",{"_index":392,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{}}}],["database",{"_index":541,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["database/entities/base.entity",{"_index":644,"title":{},"body":{"entities/User.html":{}}}],["database/interfaces/base.interface",{"_index":678,"title":{},"body":{"interfaces/UserRepositoryInterface.html":{}}}],["database:${entity.metadata.name",{"_index":368,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{}}}],["databasemodule",{"_index":76,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["datawithid",{"_index":405,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{}}}],["datawithid.id",{"_index":406,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{}}}],["date",{"_index":435,"title":{},"body":{"classes/BaseEntity.html":{},"entities/User.html":{}}}],["db_host_dev",{"_index":883,"title":{},"body":{"miscellaneous/variables.html":{}}}],["db_name_dev",{"_index":891,"title":{},"body":{"miscellaneous/variables.html":{}}}],["db_password_dev",{"_index":889,"title":{},"body":{"miscellaneous/variables.html":{}}}],["db_port_dev",{"_index":885,"title":{},"body":{"miscellaneous/variables.html":{}}}],["db_username_dev",{"_index":887,"title":{},"body":{"miscellaneous/variables.html":{}}}],["declarations",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"overview.html":{}}}],["decorators",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{},"classes/BaseAuthDTO.html":{},"classes/BaseEntity.html":{},"classes/CompareBcryptDTO.html":{},"classes/HashBcryptDTO.html":{},"classes/LoginDTO.html":{},"classes/RegisterDTO.html":{},"entities/User.html":{}}}],["deeper",{"_index":819,"title":{},"body":{"index.html":{}}}],["deeppartial",{"_index":319,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/BaseInterfaceRepository.html":{},"interfaces/HasId.html":{},"injectables/UserRepository.html":{}}}],["default",{"_index":21,"title":{},"body":{"classes/AddBaseEntity1761088297244.html":{},"classes/BaseEntity.html":{},"miscellaneous/variables.html":{}}}],["default('604800",{"_index":905,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defaultstrategy",{"_index":196,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":23,"title":{},"body":{"classes/AddBaseEntity1761088297244.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseAbstractRepostitory.html":{},"classes/BaseAuthDTO.html":{},"classes/BaseEntity.html":{},"interfaces/BaseInterfaceRepository.html":{},"injectables/BcryptProvider.html":{},"classes/CompareBcryptDTO.html":{},"injectables/CustomThrottlerGuard.html":{},"classes/HashBcryptDTO.html":{},"injectables/JwtProvider.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDTO.html":{},"classes/RegisterDTO.html":{},"classes/SerializerInterceptor.html":{},"entities/User.html":{},"injectables/UserRepository.html":{}}}],["delete",{"_index":294,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/BaseInterfaceRepository.html":{},"interfaces/HasId.html":{},"injectables/UserRepository.html":{}}}],["delete(id",{"_index":325,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/BaseInterfaceRepository.html":{},"interfaces/HasId.html":{},"injectables/UserRepository.html":{}}}],["deleted",{"_index":393,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{}}}],["deletedat",{"_index":53,"title":{},"body":{"classes/AddBaseEntity1761088297244.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"entities/User.html":{}}}],["deletedatecolumn",{"_index":643,"title":{},"body":{"entities/User.html":{}}}],["deletedatecolumn({type",{"_index":633,"title":{},"body":{"entities/User.html":{}}}],["dependencies",{"_index":66,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":770,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":789,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":780,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":800,"title":{},"body":{"index.html":{}}}],["description",{"_index":748,"title":{},"body":{"index.html":{},"properties.html":{}}}],["development",{"_index":518,"title":{},"body":{"injectables/CustomThrottlerGuard.html":{},"modules/DatabaseModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["devtools",{"_index":831,"title":{},"body":{"index.html":{}}}],["disable",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"interfaces/UserRepositoryInterface.html":{}}}],["discord",{"_index":816,"title":{},"body":{"index.html":{}}}],["dive",{"_index":818,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":682,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["dotenv",{"_index":714,"title":{},"body":{"dependencies.html":{}}}],["down",{"_index":16,"title":{},"body":{"classes/AddBaseEntity1761088297244.html":{}}}],["down(queryrunner",{"_index":25,"title":{},"body":{"classes/AddBaseEntity1761088297244.html":{}}}],["dto",{"_index":501,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializerInterceptor.html":{},"miscellaneous/functions.html":{}}}],["dtos/base",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dtos/bcrypt.dto",{"_index":476,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["e2e",{"_index":765,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":743,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":777,"title":{},"body":{"index.html":{}}}],["email",{"_index":49,"title":{},"body":{"classes/AddBaseEntity1761088297244.html":{},"injectables/AuthService.html":{},"classes/BaseAuthDTO.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDTO.html":{},"classes/RegisterDTO.html":{},"entities/User.html":{},"injectables/UserRepository.html":{}}}],["empty",{"_index":679,"title":{},"body":{"interfaces/UserRepositoryInterface.html":{}}}],["ensure",{"_index":775,"title":{},"body":{"index.html":{}}}],["ensureuserexists(user",{"_index":610,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["enterprise",{"_index":835,"title":{},"body":{"index.html":{}}}],["entities",{"_index":544,"title":{},"body":{"modules/DatabaseModule.html":{},"entities/User.html":{},"overview.html":{}}}],["entities/user.entity",{"_index":587,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/UserRepositoryInterface.html":{}}}],["entity",{"_index":311,"title":{"entities/User.html":{}},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{},"entities/User.html":{},"coverage.html":{}}}],["entity.js",{"_index":547,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["entity.ts",{"_index":548,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["entitylike",{"_index":351,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/BaseInterfaceRepository.html":{},"injectables/UserRepository.html":{}}}],["env",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["env.zod",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["env.zod.ts",{"_index":698,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["envconfig",{"_index":701,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["envfilepath",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["envschema",{"_index":699,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["error",{"_index":345,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{},"injectables/UserRepository.html":{}}}],["error.message",{"_index":418,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{}}}],["errormessage",{"_index":416,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{}}}],["eslint",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"interfaces/UserRepositoryInterface.html":{}}}],["eslint/no",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"interfaces/UserRepositoryInterface.html":{}}}],["example",{"_index":753,"title":{},"body":{"index.html":{}}}],["excludeextraneousvalues",{"_index":506,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializerInterceptor.html":{}}}],["executioncontext",{"_index":487,"title":{},"body":{"interfaces/ClassConstructor.html":{},"injectables/CustomThrottlerGuard.html":{},"classes/SerializerInterceptor.html":{}}}],["existing",{"_index":399,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{}}}],["existinguser",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{}}}],["exists",{"_index":295,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/BaseInterfaceRepository.html":{},"injectables/UserRepository.html":{}}}],["exists(where",{"_index":328,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/BaseInterfaceRepository.html":{},"interfaces/HasId.html":{},"injectables/UserRepository.html":{}}}],["experience",{"_index":821,"title":{},"body":{"index.html":{}}}],["expiresin",{"_index":204,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtProvider.html":{}}}],["export",{"_index":36,"title":{},"body":{"classes/AddBaseEntity1761088297244.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseAbstractRepostitory.html":{},"classes/BaseAuthDTO.html":{},"classes/BaseEntity.html":{},"interfaces/BaseInterfaceRepository.html":{},"injectables/BcryptProvider.html":{},"interfaces/ClassConstructor.html":{},"classes/CompareBcryptDTO.html":{},"injectables/CustomThrottlerGuard.html":{},"modules/DatabaseModule.html":{},"interfaces/HasId.html":{},"classes/HashBcryptDTO.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtProvider.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDTO.html":{},"interfaces/LoginResponse.html":{},"classes/RegisterDTO.html":{},"interfaces/RegisterResponse.html":{},"classes/SerializerInterceptor.html":{},"entities/User.html":{},"injectables/UserRepository.html":{},"interfaces/UserRepositoryInterface.html":{}}}],["exports",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"overview.html":{}}}],["express",{"_index":708,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":432,"title":{},"body":{"classes/BaseAuthDTO.html":{},"classes/CompareBcryptDTO.html":{},"injectables/CustomThrottlerGuard.html":{},"classes/HashBcryptDTO.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDTO.html":{},"classes/RegisterDTO.html":{},"entities/User.html":{},"injectables/UserRepository.html":{},"interfaces/UserRepositoryInterface.html":{}}}],["extractjwt",{"_index":584,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":590,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["failed",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{}}}],["false",{"_index":553,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/JwtStrategy.html":{}}}],["fast",{"_index":793,"title":{},"body":{"index.html":{}}}],["features",{"_index":804,"title":{},"body":{"index.html":{}}}],["few",{"_index":795,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AddBaseEntity1761088297244.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseAbstractRepostitory.html":{},"classes/BaseAuthDTO.html":{},"classes/BaseEntity.html":{},"interfaces/BaseInterfaceRepository.html":{},"injectables/BcryptProvider.html":{},"interfaces/ClassConstructor.html":{},"classes/CompareBcryptDTO.html":{},"injectables/CustomThrottlerGuard.html":{},"modules/DatabaseModule.html":{},"interfaces/HasId.html":{},"classes/HashBcryptDTO.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtProvider.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDTO.html":{},"interfaces/LoginResponse.html":{},"classes/RegisterDTO.html":{},"interfaces/RegisterResponse.html":{},"classes/SerializerInterceptor.html":{},"entities/User.html":{},"injectables/UserRepository.html":{},"interfaces/UserRepositoryInterface.html":{},"coverage.html":{}}}],["filtercondition",{"_index":336,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/BaseInterfaceRepository.html":{},"injectables/UserRepository.html":{}}}],["find",{"_index":382,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{}}}],["findall",{"_index":296,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/BaseInterfaceRepository.html":{},"injectables/UserRepository.html":{}}}],["findall(options",{"_index":331,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/BaseInterfaceRepository.html":{},"interfaces/HasId.html":{},"injectables/UserRepository.html":{}}}],["findbycondition",{"_index":297,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/BaseInterfaceRepository.html":{},"injectables/UserRepository.html":{}}}],["findbycondition(filtercondition",{"_index":333,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/BaseInterfaceRepository.html":{},"interfaces/HasId.html":{},"injectables/UserRepository.html":{}}}],["findbyemail",{"_index":646,"title":{},"body":{"injectables/UserRepository.html":{}}}],["findbyemail(email",{"_index":649,"title":{},"body":{"injectables/UserRepository.html":{}}}],["findmanyoptions",{"_index":315,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/BaseInterfaceRepository.html":{},"interfaces/HasId.html":{},"injectables/UserRepository.html":{}}}],["findone",{"_index":298,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/BaseInterfaceRepository.html":{},"injectables/UserRepository.html":{}}}],["findone(options",{"_index":337,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/BaseInterfaceRepository.html":{},"interfaces/HasId.html":{},"injectables/UserRepository.html":{}}}],["findonebyid",{"_index":299,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/BaseInterfaceRepository.html":{},"injectables/UserRepository.html":{}}}],["findonebyid(id",{"_index":339,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/BaseInterfaceRepository.html":{},"interfaces/HasId.html":{},"injectables/UserRepository.html":{}}}],["findoneoptions",{"_index":334,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/BaseInterfaceRepository.html":{},"interfaces/HasId.html":{},"injectables/UserRepository.html":{}}}],["findoptionswhere",{"_index":329,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/BaseInterfaceRepository.html":{},"interfaces/HasId.html":{},"injectables/UserRepository.html":{}}}],["finduserbyid(userid",{"_index":606,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["findwithrelations",{"_index":300,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/BaseInterfaceRepository.html":{},"injectables/UserRepository.html":{}}}],["findwithrelations(relations",{"_index":341,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/BaseInterfaceRepository.html":{},"interfaces/HasId.html":{},"injectables/UserRepository.html":{}}}],["focus",{"_index":803,"title":{},"body":{"index.html":{}}}],["follow",{"_index":839,"title":{},"body":{"index.html":{}}}],["format",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"entities/User.html":{}}}],["found",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{},"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{},"injectables/JwtStrategy.html":{}}}],["framework",{"_index":741,"title":{},"body":{"index.html":{}}}],["full",{"_index":834,"title":{},"body":{"index.html":{}}}],["function",{"_index":496,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializerInterceptor.html":{},"coverage.html":{}}}],["functions",{"_index":728,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":798,"title":{},"body":{"index.html":{}}}],["generateaccesstoken",{"_index":564,"title":{},"body":{"injectables/JwtProvider.html":{}}}],["generateaccesstoken(payload",{"_index":569,"title":{},"body":{"injectables/JwtProvider.html":{}}}],["generaterefreshtoken",{"_index":565,"title":{},"body":{"injectables/JwtProvider.html":{}}}],["generaterefreshtoken(payload",{"_index":571,"title":{},"body":{"injectables/JwtProvider.html":{}}}],["get('profile",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{}}}],["getprofile",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{}}}],["getprofile(@request",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{}}}],["getprofile(req",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{}}}],["graph",{"_index":826,"title":{},"body":{"index.html":{},"modules.html":{}}}],["grow",{"_index":849,"title":{},"body":{"index.html":{}}}],["guards/jwt.guard",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{}}}],["handle",{"_index":421,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{}}}],["handleerror",{"_index":301,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"injectables/UserRepository.html":{}}}],["handleerror(operation",{"_index":344,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{},"injectables/UserRepository.html":{}}}],["hands",{"_index":820,"title":{},"body":{"index.html":{}}}],["handy",{"_index":809,"title":{},"body":{"index.html":{}}}],["hash",{"_index":474,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["hash(bcryptdto.password",{"_index":479,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["hashbcryptdto",{"_index":471,"title":{"classes/HashBcryptDTO.html":{}},"body":{"injectables/BcryptProvider.html":{},"classes/CompareBcryptDTO.html":{},"classes/HashBcryptDTO.html":{},"coverage.html":{}}}],["hashbcryptdto:7",{"_index":510,"title":{},"body":{"classes/CompareBcryptDTO.html":{}}}],["hashedpassword",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{},"classes/CompareBcryptDTO.html":{},"classes/HashBcryptDTO.html":{}}}],["hashpassword",{"_index":465,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["hashpassword(bcryptdto",{"_index":470,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["hasid",{"_index":363,"title":{"interfaces/HasId.html":{}},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{},"coverage.html":{}}}],["help",{"_index":824,"title":{},"body":{"index.html":{}}}],["here",{"_index":856,"title":{},"body":{"index.html":{}}}],["host",{"_index":530,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["https://nestjs.com",{"_index":862,"title":{},"body":{"index.html":{}}}],["id",{"_index":42,"title":{},"body":{"classes/AddBaseEntity1761088297244.html":{},"injectables/AuthService.html":{},"classes/BaseAbstractRepostitory.html":{},"classes/BaseEntity.html":{},"interfaces/BaseInterfaceRepository.html":{},"interfaces/HasId.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/UserRepository.html":{}}}],["identifier",{"_index":683,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":591,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":8,"title":{},"body":{"classes/AddBaseEntity1761088297244.html":{},"classes/BaseAbstractRepostitory.html":{},"interfaces/ClassConstructor.html":{},"interfaces/HasId.html":{},"classes/SerializerInterceptor.html":{},"injectables/UserRepository.html":{}}}],["import",{"_index":34,"title":{},"body":{"classes/AddBaseEntity1761088297244.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseAbstractRepostitory.html":{},"classes/BaseAuthDTO.html":{},"classes/BaseEntity.html":{},"interfaces/BaseInterfaceRepository.html":{},"injectables/BcryptProvider.html":{},"interfaces/ClassConstructor.html":{},"classes/CompareBcryptDTO.html":{},"injectables/CustomThrottlerGuard.html":{},"modules/DatabaseModule.html":{},"interfaces/HasId.html":{},"classes/HashBcryptDTO.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtProvider.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDTO.html":{},"classes/RegisterDTO.html":{},"classes/SerializerInterceptor.html":{},"entities/User.html":{},"injectables/UserRepository.html":{},"interfaces/UserRepositoryInterface.html":{}}}],["imports",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"classes/AddBaseEntity1761088297244.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseAbstractRepostitory.html":{},"classes/BaseAuthDTO.html":{},"classes/BaseEntity.html":{},"interfaces/BaseInterfaceRepository.html":{},"injectables/BcryptProvider.html":{},"classes/CompareBcryptDTO.html":{},"injectables/CustomThrottlerGuard.html":{},"interfaces/HasId.html":{},"classes/HashBcryptDTO.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtProvider.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDTO.html":{},"interfaces/LoginResponse.html":{},"classes/RegisterDTO.html":{},"interfaces/RegisterResponse.html":{},"classes/SerializerInterceptor.html":{},"entities/User.html":{},"injectables/UserRepository.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["inestapplication",{"_index":733,"title":{},"body":{"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AddBaseEntity1761088297244.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseAbstractRepostitory.html":{},"classes/BaseAuthDTO.html":{},"classes/BaseEntity.html":{},"interfaces/BaseInterfaceRepository.html":{},"injectables/BcryptProvider.html":{},"interfaces/ClassConstructor.html":{},"classes/CompareBcryptDTO.html":{},"injectables/CustomThrottlerGuard.html":{},"modules/DatabaseModule.html":{},"interfaces/HasId.html":{},"classes/HashBcryptDTO.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtProvider.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDTO.html":{},"interfaces/LoginResponse.html":{},"classes/RegisterDTO.html":{},"interfaces/RegisterResponse.html":{},"classes/SerializerInterceptor.html":{},"entities/User.html":{},"injectables/UserRepository.html":{},"interfaces/UserRepositoryInterface.html":{}}}],["information",{"_index":782,"title":{},"body":{"index.html":{}}}],["infrastructure",{"_index":806,"title":{},"body":{"index.html":{}}}],["inherited",{"_index":509,"title":{},"body":{"classes/CompareBcryptDTO.html":{},"classes/LoginDTO.html":{},"classes/RegisterDTO.html":{},"injectables/UserRepository.html":{}}}],["inject",{"_index":206,"title":{},"body":{"modules/AuthModule.html":{},"modules/DatabaseModule.html":{}}}],["injectable",{"_index":209,"title":{"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CustomThrottlerGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtProvider.html":{},"injectables/JwtStrategy.html":{},"injectables/UserRepository.html":{}},"body":{"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CustomThrottlerGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtProvider.html":{},"injectables/JwtStrategy.html":{},"injectables/UserRepository.html":{},"coverage.html":{}}}],["injectables",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CustomThrottlerGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtProvider.html":{},"injectables/JwtStrategy.html":{},"injectables/UserRepository.html":{},"overview.html":{}}}],["injectrepository",{"_index":668,"title":{},"body":{"injectables/UserRepository.html":{}}}],["injectrepository(user",{"_index":672,"title":{},"body":{"injectables/UserRepository.html":{}}}],["install",{"_index":797,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":755,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":417,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{}}}],["interact",{"_index":827,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":627,"title":{},"body":{"classes/SerializerInterceptor.html":{}}}],["intercept(contex",{"_index":502,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializerInterceptor.html":{}}}],["interface",{"_index":362,"title":{"interfaces/BaseInterfaceRepository.html":{},"interfaces/ClassConstructor.html":{},"interfaces/HasId.html":{},"interfaces/JwtPayload.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterResponse.html":{},"interfaces/UserRepositoryInterface.html":{}},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/BaseInterfaceRepository.html":{},"interfaces/ClassConstructor.html":{},"interfaces/HasId.html":{},"interfaces/JwtPayload.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterResponse.html":{},"classes/SerializerInterceptor.html":{},"interfaces/UserRepositoryInterface.html":{},"coverage.html":{}}}],["interfaces",{"_index":446,"title":{},"body":{"interfaces/BaseInterfaceRepository.html":{},"interfaces/ClassConstructor.html":{},"interfaces/HasId.html":{},"interfaces/JwtPayload.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterResponse.html":{},"interfaces/UserRepositoryInterface.html":{},"overview.html":{}}}],["interfaces/jwt",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtProvider.html":{},"injectables/JwtStrategy.html":{}}}],["interfaces/user.interface",{"_index":671,"title":{},"body":{"injectables/UserRepository.html":{}}}],["invalid",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{}}}],["isdevelopment",{"_index":527,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["isemail",{"_index":427,"title":{},"body":{"classes/BaseAuthDTO.html":{},"classes/LoginDTO.html":{},"classes/RegisterDTO.html":{}}}],["isglobal",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["isnotempty",{"_index":428,"title":{},"body":{"classes/BaseAuthDTO.html":{},"classes/LoginDTO.html":{},"classes/RegisterDTO.html":{}}}],["isnotempty()@isstring",{"_index":620,"title":{},"body":{"classes/LoginDTO.html":{}}}],["isnotempty()@isstring()@isstrongpassword",{"_index":624,"title":{},"body":{"classes/RegisterDTO.html":{}}}],["isnull",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["ispasswordvalid",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{}}}],["isstring",{"_index":429,"title":{},"body":{"classes/BaseAuthDTO.html":{},"classes/CompareBcryptDTO.html":{},"classes/HashBcryptDTO.html":{},"classes/LoginDTO.html":{},"classes/RegisterDTO.html":{}}}],["isstring()@isemail()@isnotempty",{"_index":425,"title":{},"body":{"classes/BaseAuthDTO.html":{},"classes/LoginDTO.html":{},"classes/RegisterDTO.html":{}}}],["isstrongpassword",{"_index":430,"title":{},"body":{"classes/BaseAuthDTO.html":{},"classes/LoginDTO.html":{},"classes/RegisterDTO.html":{}}}],["item",{"_index":372,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{}}}],["items",{"_index":377,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{}}}],["job",{"_index":842,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":844,"title":{},"body":{"index.html":{}}}],["join",{"_index":524,"title":{},"body":{"modules/DatabaseModule.html":{},"index.html":{}}}],["join(__dirname",{"_index":546,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["jwt",{"_index":197,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["jwt.provider",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwt_audience",{"_index":911,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwt_expires_in",{"_index":900,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwt_issuer",{"_index":908,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwt_refresh_expires_in",{"_index":903,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwt_refresh_secret",{"_index":902,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwt_secret",{"_index":898,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwtauthguard",{"_index":148,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":589,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":186,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":198,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":223,"title":{"interfaces/JwtPayload.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtProvider.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["jwtprovider",{"_index":182,"title":{"injectables/JwtProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtProvider.html":{},"coverage.html":{},"overview.html":{}}}],["jwtservice",{"_index":567,"title":{},"body":{"injectables/JwtProvider.html":{}}}],["jwtstrategy",{"_index":180,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":859,"title":{},"body":{"index.html":{}}}],["key",{"_index":59,"title":{},"body":{"classes/AddBaseEntity1761088297244.html":{},"index.html":{}}}],["learn",{"_index":812,"title":{},"body":{"index.html":{}}}],["legend",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"overview.html":{}}}],["length",{"_index":638,"title":{},"body":{"entities/User.html":{}}}],["license",{"_index":865,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":847,"title":{},"body":{"index.html":{}}}],["limit",{"_index":107,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{}}}],["line",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"interfaces/UserRepositoryInterface.html":{}}}],["linkedin",{"_index":841,"title":{},"body":{"index.html":{}}}],["logger",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{},"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{},"injectables/JwtStrategy.html":{},"injectables/UserRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["logger(context",{"_index":367,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{}}}],["logging",{"_index":554,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["loghealthinfo",{"_index":694,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["login",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@body",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(logindto",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logindto",{"_index":132,"title":{"classes/LoginDTO.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseAuthDTO.html":{},"classes/LoginDTO.html":{},"classes/RegisterDTO.html":{},"coverage.html":{}}}],["logindto.email",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginresponse",{"_index":226,"title":{"interfaces/LoginResponse.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/LoginResponse.html":{},"coverage.html":{}}}],["long",{"_index":112,"title":{},"body":{"modules/AppModule.html":{}}}],["looking",{"_index":783,"title":{},"body":{"index.html":{}}}],["loop",{"_index":837,"title":{},"body":{"index.html":{}}}],["makes",{"_index":791,"title":{},"body":{"index.html":{}}}],["managing",{"_index":805,"title":{},"body":{"index.html":{}}}],["many",{"_index":375,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{}}}],["map",{"_index":491,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializerInterceptor.html":{}}}],["map((data",{"_index":504,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializerInterceptor.html":{}}}],["matching",{"_index":62,"title":{},"body":{"classes/AddBaseEntity1761088297244.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseAbstractRepostitory.html":{},"classes/BaseAuthDTO.html":{},"classes/BaseEntity.html":{},"interfaces/BaseInterfaceRepository.html":{},"injectables/BcryptProvider.html":{},"interfaces/ClassConstructor.html":{},"classes/CompareBcryptDTO.html":{},"injectables/CustomThrottlerGuard.html":{},"modules/DatabaseModule.html":{},"interfaces/HasId.html":{},"classes/HashBcryptDTO.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtProvider.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDTO.html":{},"interfaces/LoginResponse.html":{},"classes/RegisterDTO.html":{},"interfaces/RegisterResponse.html":{},"classes/SerializerInterceptor.html":{},"entities/User.html":{},"injectables/UserRepository.html":{},"interfaces/UserRepositoryInterface.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"routes.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mau",{"_index":787,"title":{},"body":{"index.html":{}}}],["medium",{"_index":109,"title":{},"body":{"modules/AppModule.html":{}}}],["member",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{}}}],["merged",{"_index":401,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{}}}],["message",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterResponse.html":{}}}],["metadata",{"_index":721,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":13,"title":{},"body":{"classes/AddBaseEntity1761088297244.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseAbstractRepostitory.html":{},"interfaces/BaseInterfaceRepository.html":{},"injectables/BcryptProvider.html":{},"injectables/CustomThrottlerGuard.html":{},"injectables/JwtProvider.html":{},"injectables/JwtStrategy.html":{},"classes/SerializerInterceptor.html":{},"injectables/UserRepository.html":{}}}],["migrationinterface",{"_index":9,"title":{},"body":{"classes/AddBaseEntity1761088297244.html":{}}}],["migrations",{"_index":549,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["migrations/*.js",{"_index":550,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["migrations/*.ts",{"_index":551,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["miscellaneous",{"_index":727,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":846,"title":{},"body":{"index.html":{}}}],["mode",{"_index":759,"title":{},"body":{"index.html":{}}}],["module",{"_index":63,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"overview.html":{}}}],["modules",{"_index":65,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":781,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":860,"title":{},"body":{"index.html":{}}}],["name",{"_index":12,"title":{},"body":{"classes/AddBaseEntity1761088297244.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseAbstractRepostitory.html":{},"interfaces/BaseInterfaceRepository.html":{},"injectables/BcryptProvider.html":{},"injectables/CustomThrottlerGuard.html":{},"injectables/JwtProvider.html":{},"injectables/JwtStrategy.html":{},"classes/SerializerInterceptor.html":{},"entities/User.html":{},"injectables/UserRepository.html":{},"miscellaneous/functions.html":{}}}],["need",{"_index":832,"title":{},"body":{"index.html":{}}}],["nest",{"_index":749,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":864,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":486,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializerInterceptor.html":{}}}],["nestjs",{"_index":771,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseAbstractRepostitory.html":{},"injectables/BcryptProvider.html":{},"interfaces/ClassConstructor.html":{},"injectables/CustomThrottlerGuard.html":{},"modules/DatabaseModule.html":{},"interfaces/HasId.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtProvider.html":{},"injectables/JwtStrategy.html":{},"classes/SerializerInterceptor.html":{},"injectables/UserRepository.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":86,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"injectables/JwtProvider.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":90,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":187,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtProvider.html":{},"dependencies.html":{}}}],["nestjs/mau",{"_index":799,"title":{},"body":{"index.html":{}}}],["nestjs/passport",{"_index":189,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":707,"title":{},"body":{"dependencies.html":{}}}],["nestjs/throttler",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/CustomThrottlerGuard.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":522,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/UserRepository.html":{},"dependencies.html":{}}}],["nestjs_port",{"_index":893,"title":{},"body":{"miscellaneous/variables.html":{}}}],["new",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{},"classes/BaseAbstractRepostitory.html":{},"interfaces/ClassConstructor.html":{},"interfaces/HasId.html":{},"injectables/JwtStrategy.html":{},"classes/SerializerInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ClassConstructor.html":{},"injectables/JwtStrategy.html":{},"classes/SerializerInterceptor.html":{},"interfaces/UserRepositoryInterface.html":{}}}],["next.handle().pipe",{"_index":503,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializerInterceptor.html":{}}}],["node.js",{"_index":740,"title":{},"body":{"index.html":{}}}],["node_env",{"_index":895,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nodeenv",{"_index":516,"title":{},"body":{"injectables/CustomThrottlerGuard.html":{}}}],["now",{"_index":47,"title":{},"body":{"classes/AddBaseEntity1761088297244.html":{}}}],["null",{"_index":44,"title":{},"body":{"classes/AddBaseEntity1761088297244.html":{},"injectables/JwtStrategy.html":{},"entities/User.html":{}}}],["nullable",{"_index":634,"title":{},"body":{"entities/User.html":{}}}],["number",{"_index":326,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"classes/BaseEntity.html":{},"interfaces/BaseInterfaceRepository.html":{},"modules/DatabaseModule.html":{},"interfaces/HasId.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterResponse.html":{},"injectables/UserRepository.html":{}}}],["number(t",{"_index":907,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object",{"_index":680,"title":{},"body":{"interfaces/UserRepositoryInterface.html":{}}}],["observable",{"_index":489,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializerInterceptor.html":{}}}],["offer",{"_index":843,"title":{},"body":{"index.html":{}}}],["official",{"_index":788,"title":{},"body":{"index.html":{}}}],["omit",{"_index":614,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["one",{"_index":383,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{}}}],["onupdate",{"_index":442,"title":{},"body":{"classes/BaseEntity.html":{}}}],["open",{"_index":848,"title":{},"body":{"index.html":{}}}],["operation",{"_index":347,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{},"injectables/UserRepository.html":{}}}],["optional",{"_index":29,"title":{},"body":{"classes/AddBaseEntity1761088297244.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseAbstractRepostitory.html":{},"interfaces/BaseInterfaceRepository.html":{},"injectables/BcryptProvider.html":{},"injectables/CustomThrottlerGuard.html":{},"injectables/JwtProvider.html":{},"injectables/JwtStrategy.html":{},"classes/SerializerInterceptor.html":{},"injectables/UserRepository.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":317,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/BaseInterfaceRepository.html":{},"interfaces/HasId.html":{},"injectables/UserRepository.html":{}}}],["options/operator/isnull",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{}}}],["out",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":870,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":703,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["parameters",{"_index":28,"title":{},"body":{"classes/AddBaseEntity1761088297244.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseAbstractRepostitory.html":{},"interfaces/BaseInterfaceRepository.html":{},"injectables/BcryptProvider.html":{},"injectables/CustomThrottlerGuard.html":{},"injectables/JwtProvider.html":{},"injectables/JwtStrategy.html":{},"classes/SerializerInterceptor.html":{},"injectables/UserRepository.html":{},"miscellaneous/functions.html":{}}}],["part",{"_index":833,"title":{},"body":{"index.html":{}}}],["passport",{"_index":586,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":188,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":195,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":583,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":579,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":52,"title":{},"body":{"classes/AddBaseEntity1761088297244.html":{},"injectables/AuthService.html":{},"classes/BaseAuthDTO.html":{},"classes/CompareBcryptDTO.html":{},"modules/DatabaseModule.html":{},"classes/HashBcryptDTO.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDTO.html":{},"classes/RegisterDTO.html":{},"entities/User.html":{}}}],["path",{"_index":525,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["payload",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtProvider.html":{},"injectables/JwtStrategy.html":{}}}],["payload.email",{"_index":601,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.id",{"_index":600,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.interface",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtProvider.html":{},"injectables/JwtStrategy.html":{}}}],["payload.interface.ts",{"_index":562,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["persist",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{}}}],["persistuser(registerdto",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{}}}],["pg",{"_index":718,"title":{},"body":{"dependencies.html":{}}}],["pk_a3ffb1c0c8416b9fc6f907b7433",{"_index":57,"title":{},"body":{"classes/AddBaseEntity1761088297244.html":{}}}],["plainpassword",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{}}}],["plaintoclass",{"_index":493,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializerInterceptor.html":{}}}],["plaintoclass(this.dto",{"_index":505,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializerInterceptor.html":{}}}],["platform",{"_index":786,"title":{},"body":{"index.html":{}}}],["please",{"_index":815,"title":{},"body":{"index.html":{}}}],["pnpm",{"_index":754,"title":{},"body":{"index.html":{}}}],["port",{"_index":533,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["possible",{"_index":778,"title":{},"body":{"index.html":{}}}],["post",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgres",{"_index":529,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["prefix",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{}}}],["preload",{"_index":302,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/BaseInterfaceRepository.html":{},"injectables/UserRepository.html":{}}}],["preload(entitylike",{"_index":349,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/BaseInterfaceRepository.html":{},"interfaces/HasId.html":{},"injectables/UserRepository.html":{}}}],["primary",{"_index":58,"title":{},"body":{"classes/AddBaseEntity1761088297244.html":{}}}],["primarygeneratedcolumn",{"_index":439,"title":{},"body":{"classes/BaseEntity.html":{}}}],["private",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{},"classes/BaseAbstractRepostitory.html":{},"injectables/BcryptProvider.html":{},"interfaces/HasId.html":{},"injectables/JwtProvider.html":{},"injectables/JwtStrategy.html":{},"injectables/UserRepository.html":{}}}],["process",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{}}}],["process.env.node_env",{"_index":517,"title":{},"body":{"injectables/CustomThrottlerGuard.html":{}}}],["production",{"_index":545,"title":{},"body":{"modules/DatabaseModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["progressive",{"_index":739,"title":{},"body":{"index.html":{}}}],["project",{"_index":751,"title":{},"body":{"index.html":{}}}],["promise",{"_index":31,"title":{},"body":{"classes/AddBaseEntity1761088297244.html":{},"injectables/AuthService.html":{},"classes/BaseAbstractRepostitory.html":{},"interfaces/BaseInterfaceRepository.html":{},"injectables/BcryptProvider.html":{},"injectables/CustomThrottlerGuard.html":{},"interfaces/HasId.html":{},"injectables/JwtStrategy.html":{},"injectables/UserRepository.html":{}}}],["properties",{"_index":11,"title":{"properties.html":{}},"body":{"classes/AddBaseEntity1761088297244.html":{},"classes/BaseAbstractRepostitory.html":{},"classes/BaseAuthDTO.html":{},"classes/BaseEntity.html":{},"classes/CompareBcryptDTO.html":{},"interfaces/HasId.html":{},"classes/HashBcryptDTO.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDTO.html":{},"interfaces/LoginResponse.html":{},"classes/RegisterDTO.html":{},"interfaces/RegisterResponse.html":{},"entities/User.html":{},"injectables/UserRepository.html":{},"properties.html":{}}}],["protected",{"_index":291,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"injectables/CustomThrottlerGuard.html":{},"interfaces/HasId.html":{},"injectables/UserRepository.html":{}}}],["provide",{"_index":116,"title":{},"body":{"modules/AppModule.html":{}}}],["providers",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"overview.html":{}}}],["providers/auth.service",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/jwt.provider",{"_index":192,"title":{},"body":{"modules/AuthModule.html":{}}}],["public",{"_index":14,"title":{},"body":{"classes/AddBaseEntity1761088297244.html":{},"injectables/AuthService.html":{},"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{},"injectables/JwtProvider.html":{},"injectables/JwtStrategy.html":{},"injectables/UserRepository.html":{}}}],["queryrunner",{"_index":26,"title":{},"body":{"classes/AddBaseEntity1761088297244.html":{}}}],["queryrunner.query",{"_index":38,"title":{},"body":{"classes/AddBaseEntity1761088297244.html":{}}}],["queryrunner.query(`drop",{"_index":60,"title":{},"body":{"classes/AddBaseEntity1761088297244.html":{}}}],["questions",{"_index":813,"title":{},"body":{"index.html":{}}}],["read",{"_index":855,"title":{},"body":{"index.html":{}}}],["readme",{"_index":738,"title":{"index.html":{}},"body":{}}],["readonly",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseAbstractRepostitory.html":{},"injectables/BcryptProvider.html":{},"interfaces/HasId.html":{},"injectables/JwtProvider.html":{},"injectables/JwtStrategy.html":{},"injectables/UserRepository.html":{}}}],["ready",{"_index":769,"title":{},"body":{"index.html":{}}}],["real",{"_index":828,"title":{},"body":{"index.html":{}}}],["record",{"_index":737,"title":{},"body":{"miscellaneous/functions.html":{}}}],["reflect",{"_index":720,"title":{},"body":{"dependencies.html":{}}}],["refreshtokenexpiresin",{"_index":576,"title":{},"body":{"injectables/JwtProvider.html":{}}}],["refreshtokensecret",{"_index":574,"title":{},"body":{"injectables/JwtProvider.html":{}}}],["register",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["register(@body",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(registerdto",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["registerdto",{"_index":137,"title":{"classes/RegisterDTO.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseAuthDTO.html":{},"classes/LoginDTO.html":{},"classes/RegisterDTO.html":{},"coverage.html":{}}}],["registerdto.email",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{}}}],["registerdto.password",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{}}}],["registered",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{}}}],["registerresponse",{"_index":228,"title":{"interfaces/RegisterResponse.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/RegisterResponse.html":{},"coverage.html":{}}}],["registration",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{}}}],["relations",{"_index":343,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/BaseInterfaceRepository.html":{},"interfaces/HasId.html":{},"injectables/UserRepository.html":{}}}],["remove",{"_index":303,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/BaseInterfaceRepository.html":{},"interfaces/HasId.html":{},"injectables/UserRepository.html":{}}}],["remove(data",{"_index":352,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/BaseInterfaceRepository.html":{},"interfaces/HasId.html":{},"injectables/UserRepository.html":{}}}],["removed",{"_index":390,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{}}}],["repositories",{"_index":208,"title":{},"body":{"modules/AuthModule.html":{}}}],["repositories/user.repository",{"_index":193,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["repository",{"_index":308,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{},"injectables/UserRepository.html":{},"index.html":{}}}],["req",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{}}}],["req.user",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{}}}],["request",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["requiring",{"_index":794,"title":{},"body":{"index.html":{}}}],["reset",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"overview.html":{}}}],["resources",{"_index":807,"title":{},"body":{"index.html":{}}}],["responses/login.response",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{}}}],["responses/register.response",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{}}}],["result",{"_index":380,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{},"injectables/JwtStrategy.html":{}}}],["results",{"_index":61,"title":{},"body":{"classes/AddBaseEntity1761088297244.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseAbstractRepostitory.html":{},"classes/BaseAuthDTO.html":{},"classes/BaseEntity.html":{},"interfaces/BaseInterfaceRepository.html":{},"injectables/BcryptProvider.html":{},"interfaces/ClassConstructor.html":{},"classes/CompareBcryptDTO.html":{},"injectables/CustomThrottlerGuard.html":{},"modules/DatabaseModule.html":{},"interfaces/HasId.html":{},"classes/HashBcryptDTO.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtProvider.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDTO.html":{},"interfaces/LoginResponse.html":{},"classes/RegisterDTO.html":{},"interfaces/RegisterResponse.html":{},"classes/SerializerInterceptor.html":{},"entities/User.html":{},"injectables/UserRepository.html":{},"interfaces/UserRepositoryInterface.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"routes.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseAbstractRepostitory.html":{},"injectables/BcryptProvider.html":{},"interfaces/ClassConstructor.html":{},"injectables/CustomThrottlerGuard.html":{},"modules/DatabaseModule.html":{},"interfaces/HasId.html":{},"injectables/JwtProvider.html":{},"injectables/JwtStrategy.html":{},"classes/SerializerInterceptor.html":{},"injectables/UserRepository.html":{}}}],["returns",{"_index":30,"title":{},"body":{"classes/AddBaseEntity1761088297244.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseAbstractRepostitory.html":{},"interfaces/BaseInterfaceRepository.html":{},"injectables/BcryptProvider.html":{},"injectables/CustomThrottlerGuard.html":{},"injectables/JwtProvider.html":{},"injectables/JwtStrategy.html":{},"classes/SerializerInterceptor.html":{},"injectables/UserRepository.html":{}}}],["routes",{"_index":877,"title":{"routes.html":{}},"body":{"routes.html":{}}}],["run",{"_index":756,"title":{},"body":{"index.html":{}}}],["runs",{"_index":776,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":490,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializerInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":492,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializerInterceptor.html":{}}}],["saltrounds",{"_index":477,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["sanitizeuser(user",{"_index":613,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["save",{"_index":304,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/BaseInterfaceRepository.html":{},"interfaces/HasId.html":{},"injectables/UserRepository.html":{}}}],["save(data",{"_index":354,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/BaseInterfaceRepository.html":{},"interfaces/HasId.html":{},"injectables/UserRepository.html":{}}}],["saved",{"_index":370,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{}}}],["saved.length",{"_index":376,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{}}}],["savemany",{"_index":305,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/BaseInterfaceRepository.html":{},"injectables/UserRepository.html":{}}}],["savemany(data",{"_index":356,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/BaseInterfaceRepository.html":{},"interfaces/HasId.html":{},"injectables/UserRepository.html":{}}}],["scalable",{"_index":744,"title":{},"body":{"index.html":{}}}],["secret",{"_index":201,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtProvider.html":{}}}],["secretorkey",{"_index":592,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["serial",{"_index":43,"title":{},"body":{"classes/AddBaseEntity1761088297244.html":{}}}],["serialize",{"_index":690,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["serialize(dto",{"_index":497,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializerInterceptor.html":{},"miscellaneous/functions.html":{}}}],["serializerinterceptor",{"_index":500,"title":{"classes/SerializerInterceptor.html":{}},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializerInterceptor.html":{},"coverage.html":{}}}],["serializerinterceptor(dto",{"_index":499,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializerInterceptor.html":{}}}],["server",{"_index":745,"title":{},"body":{"index.html":{}}}],["setup",{"_index":752,"title":{},"body":{"index.html":{}}}],["setupglobalconfiguration",{"_index":695,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["setupglobalconfiguration(app",{"_index":732,"title":{},"body":{"miscellaneous/functions.html":{}}}],["setupgracefulshutdown",{"_index":696,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["setupgracefulshutdown(app",{"_index":735,"title":{},"body":{"miscellaneous/functions.html":{}}}],["short",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{}}}],["shouldskip",{"_index":513,"title":{},"body":{"injectables/CustomThrottlerGuard.html":{}}}],["shouldskip(context",{"_index":514,"title":{},"body":{"injectables/CustomThrottlerGuard.html":{}}}],["side",{"_index":746,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":203,"title":{},"body":{"modules/AuthModule.html":{}}}],["simple",{"_index":796,"title":{},"body":{"index.html":{}}}],["skipthrottle",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{}}}],["skipthrottle()@useguards(jwtauthguard)@get('profile",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AddBaseEntity1761088297244.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseAbstractRepostitory.html":{},"classes/BaseAuthDTO.html":{},"classes/BaseEntity.html":{},"interfaces/BaseInterfaceRepository.html":{},"injectables/BcryptProvider.html":{},"interfaces/ClassConstructor.html":{},"classes/CompareBcryptDTO.html":{},"injectables/CustomThrottlerGuard.html":{},"modules/DatabaseModule.html":{},"interfaces/HasId.html":{},"classes/HashBcryptDTO.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtProvider.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDTO.html":{},"interfaces/LoginResponse.html":{},"classes/RegisterDTO.html":{},"interfaces/RegisterResponse.html":{},"classes/SerializerInterceptor.html":{},"entities/User.html":{},"injectables/UserRepository.html":{},"interfaces/UserRepositoryInterface.html":{},"index.html":{}}}],["sponsors",{"_index":851,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":729,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../serialize.interceptor.ts",{"_index":730,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../validate",{"_index":731,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.module",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.module.ts",{"_index":184,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/controllers/auth.controller.ts",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/controllers/auth.controller.ts:15",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/controllers/auth.controller.ts:21",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/controllers/auth.controller.ts:28",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/dtos/base",{"_index":423,"title":{},"body":{"classes/BaseAuthDTO.html":{},"classes/LoginDTO.html":{},"classes/RegisterDTO.html":{},"coverage.html":{}}}],["src/auth/dtos/bcrypt.dto.ts",{"_index":507,"title":{},"body":{"classes/CompareBcryptDTO.html":{},"classes/HashBcryptDTO.html":{},"coverage.html":{}}}],["src/auth/dtos/bcrypt.dto.ts:12",{"_index":508,"title":{},"body":{"classes/CompareBcryptDTO.html":{}}}],["src/auth/dtos/bcrypt.dto.ts:7",{"_index":557,"title":{},"body":{"classes/HashBcryptDTO.html":{}}}],["src/auth/entities/user.entity",{"_index":523,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/UserRepository.html":{}}}],["src/auth/entities/user.entity.ts",{"_index":632,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/auth/entities/user.entity.ts:12",{"_index":641,"title":{},"body":{"entities/User.html":{}}}],["src/auth/entities/user.entity.ts:15",{"_index":635,"title":{},"body":{"entities/User.html":{}}}],["src/auth/entities/user.entity.ts:9",{"_index":640,"title":{},"body":{"entities/User.html":{}}}],["src/auth/guards/jwt.guard.ts",{"_index":558,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/interfaces/jwt",{"_index":561,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["src/auth/interfaces/user.interface.ts",{"_index":677,"title":{},"body":{"interfaces/UserRepositoryInterface.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:16",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:24",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:59",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/bcrypt.provider",{"_index":190,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/providers/bcrypt.provider.ts",{"_index":463,"title":{},"body":{"injectables/BcryptProvider.html":{},"coverage.html":{}}}],["src/auth/providers/bcrypt.provider.ts:10",{"_index":472,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/auth/providers/bcrypt.provider.ts:14",{"_index":468,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/auth/providers/jwt.provider.ts",{"_index":563,"title":{},"body":{"injectables/JwtProvider.html":{},"coverage.html":{}}}],["src/auth/providers/jwt.provider.ts:13",{"_index":570,"title":{},"body":{"injectables/JwtProvider.html":{}}}],["src/auth/providers/jwt.provider.ts:17",{"_index":572,"title":{},"body":{"injectables/JwtProvider.html":{}}}],["src/auth/providers/jwt.provider.ts:7",{"_index":568,"title":{},"body":{"injectables/JwtProvider.html":{}}}],["src/auth/repositories/user.repository.ts",{"_index":645,"title":{},"body":{"injectables/UserRepository.html":{},"coverage.html":{}}}],["src/auth/repositories/user.repository.ts:14",{"_index":648,"title":{},"body":{"injectables/UserRepository.html":{}}}],["src/auth/repositories/user.repository.ts:22",{"_index":650,"title":{},"body":{"injectables/UserRepository.html":{}}}],["src/auth/responses/login.response.ts",{"_index":623,"title":{},"body":{"interfaces/LoginResponse.html":{},"coverage.html":{}}}],["src/auth/responses/register.response.ts",{"_index":626,"title":{},"body":{"interfaces/RegisterResponse.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts",{"_index":578,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts:14",{"_index":580,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/jwt.strategy.ts:29",{"_index":582,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/common/guards/throttle.guard",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["src/common/guards/throttle.guard.ts",{"_index":511,"title":{},"body":{"injectables/CustomThrottlerGuard.html":{},"coverage.html":{}}}],["src/common/guards/throttle.guard.ts:8",{"_index":515,"title":{},"body":{"injectables/CustomThrottlerGuard.html":{}}}],["src/common/interceptors/serialize.interceptor.ts",{"_index":484,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializerInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/common/interceptors/serialize.interceptor.ts:20",{"_index":629,"title":{},"body":{"classes/SerializerInterceptor.html":{}}}],["src/common/interceptors/serialize.interceptor.ts:23",{"_index":630,"title":{},"body":{"classes/SerializerInterceptor.html":{}}}],["src/database/database.module",{"_index":92,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["src/database/database.module.ts",{"_index":520,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/database/entities/base.entity.ts",{"_index":434,"title":{},"body":{"classes/BaseEntity.html":{},"coverage.html":{}}}],["src/database/entities/base.entity.ts:15",{"_index":443,"title":{},"body":{"classes/BaseEntity.html":{}}}],["src/database/entities/base.entity.ts:5",{"_index":440,"title":{},"body":{"classes/BaseEntity.html":{}}}],["src/database/entities/base.entity.ts:8",{"_index":438,"title":{},"body":{"classes/BaseEntity.html":{}}}],["src/database/interfaces/base.interface",{"_index":361,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{}}}],["src/database/interfaces/base.interface.ts",{"_index":447,"title":{},"body":{"interfaces/BaseInterfaceRepository.html":{},"coverage.html":{}}}],["src/database/interfaces/base.interface.ts:10",{"_index":456,"title":{},"body":{"interfaces/BaseInterfaceRepository.html":{}}}],["src/database/interfaces/base.interface.ts:11",{"_index":454,"title":{},"body":{"interfaces/BaseInterfaceRepository.html":{}}}],["src/database/interfaces/base.interface.ts:12",{"_index":453,"title":{},"body":{"interfaces/BaseInterfaceRepository.html":{}}}],["src/database/interfaces/base.interface.ts:13",{"_index":459,"title":{},"body":{"interfaces/BaseInterfaceRepository.html":{}}}],["src/database/interfaces/base.interface.ts:14",{"_index":451,"title":{},"body":{"interfaces/BaseInterfaceRepository.html":{}}}],["src/database/interfaces/base.interface.ts:15",{"_index":457,"title":{},"body":{"interfaces/BaseInterfaceRepository.html":{}}}],["src/database/interfaces/base.interface.ts:16",{"_index":458,"title":{},"body":{"interfaces/BaseInterfaceRepository.html":{}}}],["src/database/interfaces/base.interface.ts:17",{"_index":455,"title":{},"body":{"interfaces/BaseInterfaceRepository.html":{}}}],["src/database/interfaces/base.interface.ts:18",{"_index":462,"title":{},"body":{"interfaces/BaseInterfaceRepository.html":{}}}],["src/database/interfaces/base.interface.ts:19",{"_index":448,"title":{},"body":{"interfaces/BaseInterfaceRepository.html":{}}}],["src/database/interfaces/base.interface.ts:20",{"_index":452,"title":{},"body":{"interfaces/BaseInterfaceRepository.html":{}}}],["src/database/interfaces/base.interface.ts:6",{"_index":449,"title":{},"body":{"interfaces/BaseInterfaceRepository.html":{}}}],["src/database/interfaces/base.interface.ts:7",{"_index":450,"title":{},"body":{"interfaces/BaseInterfaceRepository.html":{}}}],["src/database/interfaces/base.interface.ts:8",{"_index":460,"title":{},"body":{"interfaces/BaseInterfaceRepository.html":{}}}],["src/database/interfaces/base.interface.ts:9",{"_index":461,"title":{},"body":{"interfaces/BaseInterfaceRepository.html":{}}}],["src/database/migrations/1761088297244",{"_index":6,"title":{},"body":{"classes/AddBaseEntity1761088297244.html":{},"coverage.html":{}}}],["src/database/repository/abstract.repository",{"_index":669,"title":{},"body":{"injectables/UserRepository.html":{}}}],["src/database/repository/abstract.repository.ts",{"_index":289,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{},"coverage.html":{}}}],["src/database/repository/abstract.repository.ts:101",{"_index":353,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{}}}],["src/database/repository/abstract.repository.ts:112",{"_index":327,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{}}}],["src/database/repository/abstract.repository.ts:122",{"_index":350,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{}}}],["src/database/repository/abstract.repository.ts:131",{"_index":338,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{}}}],["src/database/repository/abstract.repository.ts:140",{"_index":360,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{}}}],["src/database/repository/abstract.repository.ts:173",{"_index":316,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{}}}],["src/database/repository/abstract.repository.ts:182",{"_index":330,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{}}}],["src/database/repository/abstract.repository.ts:192",{"_index":346,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{}}}],["src/database/repository/abstract.repository.ts:20",{"_index":313,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{}}}],["src/database/repository/abstract.repository.ts:21",{"_index":310,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{}}}],["src/database/repository/abstract.repository.ts:28",{"_index":355,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{}}}],["src/database/repository/abstract.repository.ts:39",{"_index":357,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{}}}],["src/database/repository/abstract.repository.ts:50",{"_index":320,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{}}}],["src/database/repository/abstract.repository.ts:54",{"_index":324,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{}}}],["src/database/repository/abstract.repository.ts:58",{"_index":340,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{}}}],["src/database/repository/abstract.repository.ts:74",{"_index":335,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{}}}],["src/database/repository/abstract.repository.ts:83",{"_index":342,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{}}}],["src/database/repository/abstract.repository.ts:92",{"_index":332,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{}}}],["src/main.ts",{"_index":693,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/schemas/validate",{"_index":94,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["start",{"_index":757,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":760,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":761,"title":{},"body":{"index.html":{}}}],["starter",{"_index":750,"title":{},"body":{"index.html":{}}}],["statements",{"_index":684,"title":{},"body":{"coverage.html":{}}}],["statuscode",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterResponse.html":{}}}],["stay",{"_index":836,"title":{},"body":{"index.html":{}}}],["steps",{"_index":773,"title":{},"body":{"index.html":{}}}],["straightforward",{"_index":792,"title":{},"body":{"index.html":{}}}],["strategies",{"_index":207,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/jwt.strategy",{"_index":194,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":585,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":20,"title":{},"body":{"classes/AddBaseEntity1761088297244.html":{},"injectables/AuthService.html":{},"classes/BaseAbstractRepostitory.html":{},"classes/BaseAuthDTO.html":{},"interfaces/BaseInterfaceRepository.html":{},"classes/CompareBcryptDTO.html":{},"interfaces/HasId.html":{},"classes/HashBcryptDTO.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtProvider.html":{},"classes/LoginDTO.html":{},"interfaces/LoginResponse.html":{},"classes/RegisterDTO.html":{},"interfaces/RegisterResponse.html":{},"entities/User.html":{},"injectables/UserRepository.html":{},"miscellaneous/variables.html":{}}}],["string(error",{"_index":419,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{}}}],["successful",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{}}}],["successfully",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{},"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{},"injectables/JwtStrategy.html":{}}}],["super",{"_index":588,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["super(userrepository",{"_index":673,"title":{},"body":{"injectables/UserRepository.html":{}}}],["super.shouldskip(context",{"_index":519,"title":{},"body":{"injectables/CustomThrottlerGuard.html":{}}}],["support",{"_index":814,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":867,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":552,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["t",{"_index":322,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/BaseInterfaceRepository.html":{},"interfaces/HasId.html":{},"injectables/UserRepository.html":{}}}],["table",{"_index":40,"title":{},"body":{"classes/AddBaseEntity1761088297244.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":702,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":774,"title":{},"body":{"index.html":{}}}],["test",{"_index":764,"title":{},"body":{"index.html":{}}}],["test']).default('development",{"_index":897,"title":{},"body":{"miscellaneous/variables.html":{}}}],["test:covdeployment",{"_index":767,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":766,"title":{},"body":{"index.html":{}}}],["tests",{"_index":762,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":850,"title":{},"body":{"index.html":{}}}],["this.authservice.login(logindto",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.register(registerdto",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.bcryptprovider.comparepasswords",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.bcryptprovider.hashpassword",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt_refresh_expires_in",{"_index":577,"title":{},"body":{"injectables/JwtProvider.html":{}}}],["this.configservice.get('jwt_refresh_secret",{"_index":575,"title":{},"body":{"injectables/JwtProvider.html":{}}}],["this.createloginresponse(user",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.createregisterresponse",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.ensureuserexists(user",{"_index":597,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.entity",{"_index":365,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{}}}],["this.entity.count(options",{"_index":410,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{}}}],["this.entity.countby(where",{"_index":412,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{}}}],["this.entity.create(data",{"_index":379,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{}}}],["this.entity.delete(id",{"_index":395,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{}}}],["this.entity.find(options",{"_index":389,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{}}}],["this.entity.find(relations",{"_index":388,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{}}}],["this.entity.findone(filtercondition",{"_index":385,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{}}}],["this.entity.findone(options",{"_index":398,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{}}}],["this.entity.findoneby(options",{"_index":381,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{}}}],["this.entity.findoneby(uniquewhere",{"_index":400,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{}}}],["this.entity.merge(existing",{"_index":402,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{}}}],["this.entity.preload(entitylike",{"_index":396,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{}}}],["this.entity.remove(data",{"_index":391,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{}}}],["this.entity.save(data",{"_index":371,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{}}}],["this.entity.save(merged",{"_index":404,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{}}}],["this.findonebyid(datawithid.id",{"_index":407,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{}}}],["this.finduserbyid(payload.id",{"_index":596,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.handleerror('batch",{"_index":378,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{}}}],["this.handleerror('count",{"_index":411,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{}}}],["this.handleerror('exists",{"_index":414,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{}}}],["this.handleerror('find",{"_index":386,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{}}}],["this.handleerror('preload",{"_index":397,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{}}}],["this.handleerror('save",{"_index":374,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{}}}],["this.handleerror('upsert",{"_index":409,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{}}}],["this.handleerror(`delete",{"_index":394,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{}}}],["this.handleerror(`find",{"_index":384,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{}}}],["this.handleerror(`finding",{"_index":676,"title":{},"body":{"injectables/UserRepository.html":{}}}],["this.jwtprovider.generateaccesstoken",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.sign(payload",{"_index":573,"title":{},"body":{"injectables/JwtProvider.html":{}}}],["this.logger",{"_index":366,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{}}}],["this.logger.error",{"_index":420,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{}}}],["this.logger.log",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{},"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{}}}],["this.logger.log('initialized",{"_index":594,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.logger.log(`payload",{"_index":604,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.logger.log(`user",{"_index":619,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.logger.log(`validating",{"_index":608,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.logger.warn",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{},"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{}}}],["this.logger.warn(`invalid",{"_index":602,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.logger.warn(`user",{"_index":612,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.persistuser(registerdto",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.saltrounds",{"_index":480,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["this.sanitizeuser(user",{"_index":598,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.userrepository.create",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userrepository.findbyemail(email",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userrepository.findone",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserRepository.html":{}}}],["this.userrepository.save(user",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.validatepayload(payload",{"_index":595,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.validateuser(logindto",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.validateuseruniqueness(registerdto.email",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.verifypassword(logindto.password",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{}}}],["throttle",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{}}}],["throttle({short",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{}}}],["throttlerguard",{"_index":512,"title":{},"body":{"injectables/CustomThrottlerGuard.html":{}}}],["throttlermodule",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["throttlermodule.forroot",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["throw",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{},"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{},"injectables/JwtStrategy.html":{},"injectables/UserRepository.html":{}}}],["time",{"_index":829,"title":{},"body":{"index.html":{}}}],["timestamp",{"_index":46,"title":{},"body":{"classes/AddBaseEntity1761088297244.html":{},"classes/BaseEntity.html":{},"entities/User.html":{}}}],["token",{"_index":603,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["touch",{"_index":857,"title":{},"body":{"index.html":{}}}],["transform((t",{"_index":906,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transformer",{"_index":494,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializerInterceptor.html":{},"dependencies.html":{}}}],["true",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ClassConstructor.html":{},"injectables/CustomThrottlerGuard.html":{},"modules/DatabaseModule.html":{},"classes/SerializerInterceptor.html":{},"entities/User.html":{},"injectables/UserRepository.html":{}}}],["try",{"_index":369,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{},"injectables/UserRepository.html":{}}}],["ttl",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{}}}],["twitter",{"_index":863,"title":{},"body":{"index.html":{}}}],["type",{"_index":18,"title":{},"body":{"classes/AddBaseEntity1761088297244.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseAbstractRepostitory.html":{},"classes/BaseAuthDTO.html":{},"classes/BaseEntity.html":{},"interfaces/BaseInterfaceRepository.html":{},"injectables/BcryptProvider.html":{},"interfaces/ClassConstructor.html":{},"classes/CompareBcryptDTO.html":{},"injectables/CustomThrottlerGuard.html":{},"modules/DatabaseModule.html":{},"interfaces/HasId.html":{},"classes/HashBcryptDTO.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtProvider.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDTO.html":{},"interfaces/LoginResponse.html":{},"classes/RegisterDTO.html":{},"interfaces/RegisterResponse.html":{},"classes/SerializerInterceptor.html":{},"entities/User.html":{},"injectables/UserRepository.html":{},"interfaces/UserRepositoryInterface.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":878,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeorm",{"_index":35,"title":{},"body":{"classes/AddBaseEntity1761088297244.html":{},"classes/BaseAbstractRepostitory.html":{},"classes/BaseEntity.html":{},"interfaces/BaseInterfaceRepository.html":{},"interfaces/HasId.html":{},"injectables/JwtStrategy.html":{},"entities/User.html":{},"injectables/UserRepository.html":{},"dependencies.html":{}}}],["typeorm/find",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{}}}],["typeormmodule",{"_index":521,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":556,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["typeormmodule.forrootasync",{"_index":526,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["typescript",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"interfaces/UserRepositoryInterface.html":{},"index.html":{}}}],["unauthorizedexception",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["unauthorizedexception('invalid",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["undefined})@post('login",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{}}}],["undefined})@post('register",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{}}}],["unique",{"_index":56,"title":{},"body":{"classes/AddBaseEntity1761088297244.html":{},"entities/User.html":{}}}],["uniqueness",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{}}}],["uniquewhere",{"_index":359,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/BaseInterfaceRepository.html":{},"interfaces/HasId.html":{},"injectables/UserRepository.html":{}}}],["unit",{"_index":763,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":415,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{},"injectables/JwtStrategy.html":{}}}],["unlicensed",{"_index":876,"title":{},"body":{"properties.html":{}}}],["unsafe",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{}}}],["unused",{"_index":615,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["up",{"_index":17,"title":{},"body":{"classes/AddBaseEntity1761088297244.html":{}}}],["up(queryrunner",{"_index":32,"title":{},"body":{"classes/AddBaseEntity1761088297244.html":{}}}],["updated",{"_index":403,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{}}}],["updatedat",{"_index":48,"title":{},"body":{"classes/AddBaseEntity1761088297244.html":{},"classes/BaseEntity.html":{}}}],["updatedatecolumn",{"_index":445,"title":{},"body":{"classes/BaseEntity.html":{}}}],["updatedatecolumn({type",{"_index":441,"title":{},"body":{"classes/BaseEntity.html":{}}}],["updates",{"_index":838,"title":{},"body":{"index.html":{}}}],["upsert",{"_index":306,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/BaseInterfaceRepository.html":{},"interfaces/HasId.html":{},"injectables/UserRepository.html":{}}}],["upsert(data",{"_index":358,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/BaseInterfaceRepository.html":{},"interfaces/HasId.html":{},"injectables/UserRepository.html":{}}}],["uq_97672ac88f789774dd47f7c8be3",{"_index":55,"title":{},"body":{"classes/AddBaseEntity1761088297244.html":{}}}],["useclass",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["usefactory",{"_index":199,"title":{},"body":{"modules/AuthModule.html":{},"modules/DatabaseModule.html":{}}}],["useguards",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(jwtauthguard",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{}}}],["useinterceptors",{"_index":485,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializerInterceptor.html":{}}}],["useinterceptors(new",{"_index":498,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SerializerInterceptor.html":{}}}],["user",{"_index":242,"title":{"entities/User.html":{}},"body":{"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/JwtStrategy.html":{},"entities/User.html":{},"injectables/UserRepository.html":{},"interfaces/UserRepositoryInterface.html":{},"coverage.html":{}}}],["user.password",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{}}}],["user?.id",{"_index":609,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["userid",{"_index":607,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["username",{"_index":536,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["userrepository",{"_index":183,"title":{"injectables/UserRepository.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserRepository.html":{},"coverage.html":{},"overview.html":{}}}],["userrepositoryinterface",{"_index":670,"title":{"interfaces/UserRepositoryInterface.html":{}},"body":{"injectables/UserRepository.html":{},"interfaces/UserRepositoryInterface.html":{},"coverage.html":{}}}],["users",{"_index":41,"title":{},"body":{"classes/AddBaseEntity1761088297244.html":{},"entities/User.html":{}}}],["using",{"_index":830,"title":{},"body":{"index.html":{}}}],["validate",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":581,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validated",{"_index":605,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateenv",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["validateenv(config",{"_index":736,"title":{},"body":{"miscellaneous/functions.html":{}}}],["validatepayload(payload",{"_index":599,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateuser(logindto",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuseruniqueness(email",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":431,"title":{},"body":{"classes/BaseAuthDTO.html":{},"classes/CompareBcryptDTO.html":{},"classes/HashBcryptDTO.html":{},"classes/LoginDTO.html":{},"classes/RegisterDTO.html":{},"dependencies.html":{}}}],["value",{"_index":22,"title":{},"body":{"classes/AddBaseEntity1761088297244.html":{},"miscellaneous/variables.html":{}}}],["varchar",{"_index":637,"title":{},"body":{"entities/User.html":{}}}],["variable",{"_index":697,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":881,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vars",{"_index":616,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["varying(255",{"_index":51,"title":{},"body":{"classes/AddBaseEntity1761088297244.html":{}}}],["verify",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{}}}],["verifypassword(plainpassword",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{}}}],["version",{"_index":874,"title":{},"body":{"properties.html":{}}}],["video",{"_index":822,"title":{},"body":{"index.html":{}}}],["visit",{"_index":811,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":825,"title":{},"body":{"index.html":{}}}],["void",{"_index":348,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/HasId.html":{},"injectables/UserRepository.html":{}}}],["watch",{"_index":758,"title":{},"body":{"index.html":{}}}],["website",{"_index":861,"title":{},"body":{"index.html":{}}}],["withdeleted",{"_index":675,"title":{},"body":{"injectables/UserRepository.html":{}}}],["working",{"_index":810,"title":{},"body":{"index.html":{}}}],["x",{"_index":840,"title":{},"body":{"index.html":{}}}],["yes",{"_index":312,"title":{},"body":{"classes/BaseAbstractRepostitory.html":{},"interfaces/BaseInterfaceRepository.html":{},"injectables/UserRepository.html":{}}}],["you'd",{"_index":854,"title":{},"body":{"index.html":{}}}],["you're",{"_index":768,"title":{},"body":{"index.html":{}}}],["z",{"_index":904,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.enum(['development",{"_index":896,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.infer",{"_index":880,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["z.object",{"_index":882,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.string().default('1h",{"_index":901,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.string().default('localhost",{"_index":884,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.string().default('nestjs",{"_index":912,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.string().default('nestjs_auth",{"_index":892,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.string().default('postgres",{"_index":888,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.string().default(`http://localhost:${process.env.nestjs_port",{"_index":909,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.string().min(1",{"_index":890,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.string().min(32).max(1024",{"_index":899,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.string().transform(number).pipe(z.number().positive()).default(3000",{"_index":894,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.string().transform(number).pipe(z.number().positive()).default(5432",{"_index":886,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zod",{"_index":725,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AddBaseEntity1761088297244.html":{"url":"classes/AddBaseEntity1761088297244.html","title":"class - AddBaseEntity1761088297244","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddBaseEntity1761088297244\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1761088297244-AddBaseEntity.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'AddBaseEntity1761088297244'\n                    \n                \n                    \n                        \n                                Defined in src/database/migrations/1761088297244-AddBaseEntity.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                        \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1761088297244-AddBaseEntity.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                        \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1761088297244-AddBaseEntity.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class AddBaseEntity1761088297244 implements MigrationInterface {\n  name = 'AddBaseEntity1761088297244';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(\n      `CREATE TABLE \"users\" (\"id\" SERIAL NOT NULL, \"createdAt\" TIMESTAMP NOT NULL DEFAULT now(), \"updatedAt\" TIMESTAMP NOT NULL DEFAULT now(), \"email\" character varying(255) NOT NULL, \"password\" character varying(255) NOT NULL, \"deletedAt\" TIMESTAMP, CONSTRAINT \"UQ_97672ac88f789774dd47f7c8be3\" UNIQUE (\"email\"), CONSTRAINT \"PK_a3ffb1c0c8416b9fc6f907b7433\" PRIMARY KEY (\"id\"))`,\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(`DROP TABLE \"users\"`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nCustomThrottlerGuard\n\nCustomThrottlerGuard\n\nAppModule -->\n\nCustomThrottlerGuard->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CustomThrottlerGuard\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            DatabaseModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /** @format */\n\nimport { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { ThrottlerModule } from '@nestjs/throttler';\nimport { APP_GUARD } from '@nestjs/core';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { DatabaseModule } from 'src/database/database.module';\nimport { validateEnv } from 'src/schemas/validate-env.zod';\nimport { CustomThrottlerGuard } from 'src/common/guards/throttle.guard';\n\n@Module({\n  imports: [\n    AuthModule,\n    ConfigModule.forRoot({\n      isGlobal: true,\n      envFilePath: '.env',\n      validate: validateEnv,\n    }),\n    ThrottlerModule.forRoot([\n      {\n        name: 'short',\n        ttl: 1000,\n        limit: 3,\n      },\n      {\n        name: 'medium',\n        ttl: 10000,\n        limit: 20,\n      },\n      {\n        name: 'long',\n        ttl: 60000,\n        limit: 100,\n      },\n    ]),\n    DatabaseModule,\n  ],\n  controllers: [],\n  providers: [\n    {\n      provide: APP_GUARD,\n      useClass: CustomThrottlerGuard,\n    },\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/controllers/auth.controller.ts\n        \n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                getProfile\n                            \n                            \n                                    \n                                    \n                                login\n                            \n                            \n                                    \n                                    \n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SkipThrottle()@UseGuards(JwtAuthGuard)@Get('profile')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/controllers/auth.controller.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginDTO: LoginDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Throttle({short: undefined})@Post('login')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/controllers/auth.controller.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDTO\n                                            \n                                                            LoginDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(registerDTO: RegisterDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Throttle({short: undefined})@Post('register')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/controllers/auth.controller.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                registerDTO\n                                            \n                                                            RegisterDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        /** @format */\n\nimport { Body, Controller, Get, Post, Request, UseGuards } from '@nestjs/common';\nimport { SkipThrottle, Throttle } from '@nestjs/throttler';\nimport { LoginDTO, RegisterDTO } from '../dtos/base-auth.dto';\nimport { JwtAuthGuard } from '../guards/jwt.guard';\nimport { AuthService } from '../providers/auth.service';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Throttle({ short: { limit: 3, ttl: 60000 } })\n  @Post('register')\n  register(@Body() registerDTO: RegisterDTO) {\n    return this.authService.register(registerDTO);\n  }\n\n  @Throttle({ short: { limit: 5, ttl: 60000 } })\n  @Post('login')\n  login(@Body() loginDTO: LoginDTO) {\n    return this.authService.login(loginDTO);\n  }\n\n  @SkipThrottle()\n  @UseGuards(JwtAuthGuard)\n  @Get('profile')\n  getProfile(@Request() req) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/no-unsafe-member-access\n    return req.user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nDatabaseModule->AuthModule\n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nBcryptProvider\n\nBcryptProvider\n\nAuthModule -->\n\nBcryptProvider->AuthModule\n\n\n\n\n\nJwtProvider\n\nJwtProvider\n\nAuthModule -->\n\nJwtProvider->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nUserRepository\n\nUserRepository\n\nAuthModule -->\n\nUserRepository->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            BcryptProvider\n                        \n                        \n                            JwtProvider\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            UserRepository\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DatabaseModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            JwtStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /** @format */\n\nimport { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { BcryptProvider } from 'src/auth/providers/bcrypt.provider';\nimport { DatabaseModule } from 'src/database/database.module';\nimport { AuthController } from './controllers/auth.controller';\nimport { AuthService } from './providers/auth.service';\nimport { JwtProvider } from './providers/jwt.provider';\nimport { UserRepository } from './repositories/user.repository';\nimport { JwtStrategy } from './strategies/jwt.strategy';\n\n@Module({\n  imports: [\n    ConfigModule,\n    PassportModule,\n    DatabaseModule,\n    PassportModule.register({\n      defaultStrategy: 'jwt',\n    }),\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: (config: ConfigService) => ({\n        secret: config.get('JWT_SECRET')!,\n        signOptions: {\n          expiresIn: config.get('JWT_EXPIRES_IN')!,\n        },\n      }),\n      inject: [ConfigService],\n    }),\n  ],\n  controllers: [AuthController],\n  providers: [\n    // Providers\n    AuthService,\n    BcryptProvider,\n    JwtProvider,\n\n    // Strategies\n    JwtStrategy,\n\n    // Repositories\n    UserRepository,\n  ],\n  exports: [JwtStrategy, PassportModule],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                login\n                            \n                            \n                                    Public\n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(bcryptProvider: BcryptProvider, userRepository: UserRepository, jwtProvider: JwtProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        bcryptProvider\n                                                  \n                                                        \n                                                                        BcryptProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtProvider\n                                                  \n                                                        \n                                                                        JwtProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginDTO: LoginDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDTO\n                                            \n                                                            LoginDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(registerDTO: RegisterDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                registerDTO\n                                            \n                                                            RegisterDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable, Logger, UnauthorizedException } from '@nestjs/common';\nimport { LoginDTO, RegisterDTO } from '../dtos/base-auth.dto';\n\nimport { IsNull } from 'typeorm/find-options/operator/IsNull';\nimport { JwtPayload } from '../interfaces/jwt-payload.interface';\nimport { UserRepository } from '../repositories/user.repository';\nimport { LoginResponse } from '../responses/login.response';\nimport { RegisterResponse } from '../responses/register.response';\nimport { BcryptProvider } from './bcrypt.provider';\nimport { JwtProvider } from './jwt.provider';\n\n@Injectable()\nexport class AuthService {\n  private readonly logger = new Logger('🔐 AuthService');\n\n  constructor(\n    private readonly bcryptProvider: BcryptProvider,\n    private readonly userRepository: UserRepository,\n    private readonly jwtProvider: JwtProvider,\n  ) {}\n\n  public async register(registerDTO: RegisterDTO): Promise {\n    await this.validateUserUniqueness(registerDTO.email);\n    await this.persistUser(registerDTO);\n    return this.createRegisterResponse();\n  }\n\n  private async validateUserUniqueness(email: string): Promise {\n    const existingUser = await this.userRepository.findByEmail(email);\n    if (existingUser) {\n      this.logger.warn(`🚨 Validate User Uniqueness : Registration attempt blocked`);\n      throw new BadRequestException('Unable to process your registration request');\n    }\n  }\n\n  private async persistUser(registerDTO: RegisterDTO): Promise {\n    const hashedPassword = await this.bcryptProvider.hashPassword({\n      password: registerDTO.password,\n    });\n\n    const user = this.userRepository.create({\n      ...registerDTO,\n      password: hashedPassword,\n    });\n\n    await this.userRepository.save(user);\n    this.logger.log(`✅ Persist User : User with email ${registerDTO.email} registered`);\n  }\n\n  private createRegisterResponse(): RegisterResponse {\n    return {\n      message: 'User registered successfully',\n      statusCode: 201,\n    };\n  }\n\n  public async login(loginDTO: LoginDTO): Promise {\n    const user = await this.validateUser(loginDTO);\n    return this.createLoginResponse(user);\n  }\n\n  private async validateUser(loginDTO: LoginDTO) {\n    const user = await this.userRepository.findOne({\n      where: { email: loginDTO.email, deletedAt: IsNull() },\n    });\n\n    if (!user) {\n      this.logger.warn(`🚨 Validate User : Login attempt failed - user not found`);\n      throw new UnauthorizedException('Invalid credentials');\n    }\n\n    await this.verifyPassword(loginDTO.password, user.password);\n    return user;\n  }\n\n  private async verifyPassword(plainPassword: string, hashedPassword: string): Promise {\n    const isPasswordValid = await this.bcryptProvider.comparePasswords({\n      password: plainPassword,\n      hashedPassword,\n    });\n\n    if (!isPasswordValid) {\n      this.logger.warn(`🚨 Verify Password : Login attempt failed - invalid password`);\n      throw new UnauthorizedException('Invalid credentials');\n    }\n  }\n\n  private createLoginResponse(payload: JwtPayload): LoginResponse {\n    const { id, email } = payload;\n    const accessToken = this.jwtProvider.generateAccessToken({ id, email });\n    return { message: 'Login successful', statusCode: 200, accessToken };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseAbstractRepostitory.html":{"url":"classes/BaseAbstractRepostitory.html","title":"class - BaseAbstractRepostitory","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseAbstractRepostitory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/repository/abstract.repository.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            BaseInterfaceRepository\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                count\n                            \n                            \n                                    Public\n                                create\n                            \n                            \n                                    Public\n                                createMany\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                exists\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findByCondition\n                            \n                            \n                                    Public\n                                    Async\n                                findOne\n                            \n                            \n                                    Public\n                                    Async\n                                findOneById\n                            \n                            \n                                    Public\n                                    Async\n                                findWithRelations\n                            \n                            \n                                    Protected\n                                handleError\n                            \n                            \n                                    Public\n                                    Async\n                                preload\n                            \n                            \n                                    Public\n                                    Async\n                                remove\n                            \n                            \n                                    Public\n                                    Async\n                                save\n                            \n                            \n                                    Public\n                                    Async\n                                saveMany\n                            \n                            \n                                    Public\n                                    Async\n                                upsert\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Protected\n                        constructor(entity: Repository, context?: string)\n                    \n                \n                        \n                            \n                                Defined in src/database/repository/abstract.repository.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        entity\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        context\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                    \n                        \n                                Defined in src/database/repository/abstract.repository.ts:20\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        count\n                        \n                    \n                \n            \n            \n                \n                        \n                    count(options?: FindManyOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/repository/abstract.repository.ts:173\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                        FindManyOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(data: DeepPartial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/repository/abstract.repository.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        DeepPartial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     T\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        createMany\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMany(data: DeepPartial[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/repository/abstract.repository.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        DeepPartial[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     T[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/repository/abstract.repository.ts:112\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        exists\n                        \n                    \n                \n            \n            \n                \n                        \n                    exists(where: FindOptionsWhere)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/repository/abstract.repository.ts:182\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                where\n                                            \n                                                        FindOptionsWhere\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(options?: FindManyOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/repository/abstract.repository.ts:92\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                        FindManyOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findByCondition\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByCondition(filterCondition: FindOneOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/repository/abstract.repository.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                filterCondition\n                                            \n                                                        FindOneOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(options: FindOneOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/repository/abstract.repository.ts:131\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                        FindOneOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/repository/abstract.repository.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findWithRelations\n                        \n                    \n                \n            \n            \n                \n                        \n                    findWithRelations(relations: FindManyOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/repository/abstract.repository.ts:83\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                relations\n                                            \n                                                        FindManyOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        handleError\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleError(operation: string, error)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/repository/abstract.repository.ts:192\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                operation\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                error\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        preload\n                        \n                    \n                \n            \n            \n                \n                        \n                    preload(entityLike: DeepPartial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/repository/abstract.repository.ts:122\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                entityLike\n                                            \n                                                        DeepPartial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(data: T)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/repository/abstract.repository.ts:101\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        save\n                        \n                    \n                \n            \n            \n                \n                        \n                    save(data: DeepPartial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/repository/abstract.repository.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        DeepPartial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        saveMany\n                        \n                    \n                \n            \n            \n                \n                        \n                    saveMany(data: DeepPartial[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/repository/abstract.repository.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        DeepPartial[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        upsert\n                        \n                    \n                \n            \n            \n                \n                        \n                    upsert(data: DeepPartial, uniqueWhere?: FindOptionsWhere)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/repository/abstract.repository.ts:140\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        DeepPartial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                uniqueWhere\n                                            \n                                                        FindOptionsWhere\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger } from '@nestjs/common';\nimport { BaseInterfaceRepository } from 'src/database/interfaces/base.interface';\nimport {\n  DeepPartial,\n  FindManyOptions,\n  FindOneOptions,\n  FindOptionsWhere,\n  Repository,\n} from 'typeorm';\n\ninterface HasId {\n  id: number;\n}\n\nexport abstract class BaseAbstractRepostitory\n  implements BaseInterfaceRepository\n{\n  protected readonly logger: Logger;\n  private entity: Repository;\n\n  protected constructor(entity: Repository, context?: string) {\n    this.entity = entity;\n    this.logger = new Logger(context || `📊 DATABASE:${entity.metadata.name}-Repository`);\n  }\n\n  public async save(data: DeepPartial): Promise {\n    try {\n      const saved = await this.entity.save(data);\n      this.logger.log(`✅ Save : Item saved successfully`);\n      return saved;\n    } catch (error) {\n      this.handleError('Save', error);\n      throw error;\n    }\n  }\n\n  public async saveMany(data: DeepPartial[]): Promise {\n    try {\n      const saved = await this.entity.save(data);\n      this.logger.log(`✅ Save Many : ${saved.length} items saved successfully`);\n      return saved;\n    } catch (error) {\n      this.handleError('Batch Save', error);\n      throw error;\n    }\n  }\n\n  public create(data: DeepPartial): T {\n    return this.entity.create(data);\n  }\n\n  public createMany(data: DeepPartial[]): T[] {\n    return this.entity.create(data);\n  }\n\n  public async findOneById(id: number): Promise {\n    try {\n      const options: FindOptionsWhere = { id } as FindOptionsWhere;\n      const result = await this.entity.findOneBy(options);\n\n      if (!result) {\n        this.logger.warn(`⚠️ Find One By ID : Item with id ${id} not found`);\n      }\n\n      return result;\n    } catch (error) {\n      this.handleError(`Find One By ID : ${id}`, error);\n      throw error;\n    }\n  }\n\n  public async findByCondition(filterCondition: FindOneOptions): Promise {\n    try {\n      return await this.entity.findOne(filterCondition);\n    } catch (error) {\n      this.handleError('Find By Condition', error);\n      throw error;\n    }\n  }\n\n  public async findWithRelations(relations: FindManyOptions): Promise {\n    try {\n      return await this.entity.find(relations);\n    } catch (error) {\n      this.handleError('Find With Relations', error);\n      throw error;\n    }\n  }\n\n  public async findAll(options?: FindManyOptions): Promise {\n    try {\n      return await this.entity.find(options);\n    } catch (error) {\n      this.handleError('Find All', error);\n      throw error;\n    }\n  }\n\n  public async remove(data: T): Promise {\n    try {\n      const removed = await this.entity.remove(data);\n      this.logger.log(`✅ Remove : Item with id ${data.id} deleted successfully`);\n      return removed;\n    } catch (error) {\n      this.handleError(`Delete : ${data.id}`, error);\n      throw error;\n    }\n  }\n\n  public async delete(id: number): Promise {\n    try {\n      await this.entity.delete(id);\n      this.logger.log(`✅ Delete : Item with id ${id} deleted successfully`);\n    } catch (error) {\n      this.handleError(`Delete : ${id}`, error);\n      throw error;\n    }\n  }\n\n  public async preload(entityLike: DeepPartial): Promise {\n    try {\n      return await this.entity.preload(entityLike);\n    } catch (error) {\n      this.handleError('Preload', error);\n      throw error;\n    }\n  }\n\n  public async findOne(options: FindOneOptions): Promise {\n    try {\n      return await this.entity.findOne(options);\n    } catch (error) {\n      this.handleError('Find One', error);\n      throw error;\n    }\n  }\n\n  public async upsert(data: DeepPartial, uniqueWhere?: FindOptionsWhere): Promise {\n    try {\n      if (uniqueWhere) {\n        const existing = await this.entity.findOneBy(uniqueWhere);\n\n        if (existing) {\n          const merged = this.entity.merge(existing, data);\n          const updated = await this.entity.save(merged);\n          this.logger.log(`✅ Upsert : Item updated successfully`);\n          return updated;\n        }\n      }\n\n      const dataWithId = data as T;\n      if (dataWithId.id) {\n        const existing = await this.findOneById(dataWithId.id);\n        if (existing) {\n          const merged = this.entity.merge(existing, data);\n          const updated = await this.entity.save(merged);\n          this.logger.log(`✅ Upsert : Item with id ${dataWithId.id} updated`);\n          return updated;\n        }\n      }\n\n      const created = await this.entity.save(data);\n      this.logger.log(`✅ Upsert : Item created successfully`);\n      return created;\n    } catch (error) {\n      this.handleError('Upsert', error);\n      throw error;\n    }\n  }\n\n  public async count(options?: FindManyOptions): Promise {\n    try {\n      return await this.entity.count(options);\n    } catch (error) {\n      this.handleError('Count', error);\n      throw error;\n    }\n  }\n\n  public async exists(where: FindOptionsWhere): Promise {\n    try {\n      const count = await this.entity.countBy(where);\n      return count > 0;\n    } catch (error) {\n      this.handleError('Exists', error);\n      throw error;\n    }\n  }\n\n  protected handleError(operation: string, error: unknown): void {\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    this.logger.error(`💥 Handle Error : ${operation}: ${errorMessage}`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseAuthDTO.html":{"url":"classes/BaseAuthDTO.html","title":"class - BaseAuthDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseAuthDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/base-auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/base-auth.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsString, IsStrongPassword } from 'class-validator';\n\nclass BaseAuthDTO {\n  @IsString()\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n}\n\nexport class RegisterDTO extends BaseAuthDTO {\n  @IsNotEmpty()\n  @IsString()\n  @IsStrongPassword()\n  password: string;\n}\n\nexport class LoginDTO extends BaseAuthDTO {\n  @IsNotEmpty()\n  @IsString()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseEntity.html":{"url":"classes/BaseEntity.html","title":"class - BaseEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/entities/base.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({type: 'timestamp', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/database/entities/base.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/database/entities/base.entity.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({type: 'timestamp', default: () => CURRENT_TIMESTAMP, onUpdate: 'CURRENT_TIMESTAMP'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/database/entities/base.entity.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreateDateColumn, PrimaryGeneratedColumn, UpdateDateColumn } from 'typeorm';\n\nexport abstract class BaseEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @CreateDateColumn({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n  createdAt: Date;\n\n  @UpdateDateColumn({\n    type: 'timestamp',\n    default: () => 'CURRENT_TIMESTAMP',\n    onUpdate: 'CURRENT_TIMESTAMP',\n  })\n  updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BaseInterfaceRepository.html":{"url":"interfaces/BaseInterfaceRepository.html","title":"interface - BaseInterfaceRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BaseInterfaceRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/interfaces/base.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        count\n                                    \n                                \n                                \n                                    \n                                        create\n                                    \n                                \n                                \n                                    \n                                        createMany\n                                    \n                                \n                                \n                                    \n                                        delete\n                                    \n                                \n                                \n                                    \n                                        exists\n                                    \n                                \n                                \n                                    \n                                        findAll\n                                    \n                                \n                                \n                                    \n                                        findByCondition\n                                    \n                                \n                                \n                                    \n                                        findOne\n                                    \n                                \n                                \n                                    \n                                        findOneById\n                                    \n                                \n                                \n                                    \n                                        findWithRelations\n                                    \n                                \n                                \n                                    \n                                        preload\n                                    \n                                \n                                \n                                    \n                                        remove\n                                    \n                                \n                                \n                                    \n                                        save\n                                    \n                                \n                                \n                                    \n                                        saveMany\n                                    \n                                \n                                \n                                    \n                                        upsert\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        count\n                        \n                    \n                \n            \n            \n                \ncount(options?: FindManyOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/interfaces/base.interface.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                        FindManyOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(data: DeepPartial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/interfaces/base.interface.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        DeepPartial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     T\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createMany\n                        \n                    \n                \n            \n            \n                \ncreateMany(data: DeepPartial[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/interfaces/base.interface.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        DeepPartial[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     T[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(id: string | number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/interfaces/base.interface.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                        string | number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        exists\n                        \n                    \n                \n            \n            \n                \nexists(where: FindOptionsWhere)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/interfaces/base.interface.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                where\n                                            \n                                                        FindOptionsWhere\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll(options?: FindManyOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/interfaces/base.interface.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                        FindManyOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByCondition\n                        \n                    \n                \n            \n            \n                \nfindByCondition(filterCondition: FindOneOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/interfaces/base.interface.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                filterCondition\n                                            \n                                                        FindOneOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(options: FindOneOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/interfaces/base.interface.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                        FindOneOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneById\n                        \n                    \n                \n            \n            \n                \nfindOneById(id: string | number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/interfaces/base.interface.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                        string | number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findWithRelations\n                        \n                    \n                \n            \n            \n                \nfindWithRelations(relations: FindManyOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/interfaces/base.interface.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                relations\n                                            \n                                                        FindManyOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        preload\n                        \n                    \n                \n            \n            \n                \npreload(entityLike: DeepPartial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/interfaces/base.interface.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                entityLike\n                                            \n                                                        DeepPartial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(data: T)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/interfaces/base.interface.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        save\n                        \n                    \n                \n            \n            \n                \nsave(data: DeepPartial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/interfaces/base.interface.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        DeepPartial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        saveMany\n                        \n                    \n                \n            \n            \n                \nsaveMany(data: DeepPartial[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/interfaces/base.interface.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        DeepPartial[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        upsert\n                        \n                    \n                \n            \n            \n                \nupsert(data: DeepPartial, uniqueWhere?: FindOptionsWhere)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/interfaces/base.interface.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        DeepPartial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                uniqueWhere\n                                            \n                                                        FindOptionsWhere\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { DeepPartial, FindManyOptions, FindOneOptions, FindOptionsWhere } from 'typeorm';\n\nexport interface BaseInterfaceRepository {\n  create(data: DeepPartial): T;\n  createMany(data: DeepPartial[]): T[];\n  save(data: DeepPartial): Promise;\n  saveMany(data: DeepPartial[]): Promise;\n  findOneById(id: string | number): Promise;\n  findByCondition(filterCondition: FindOneOptions): Promise;\n  findAll(options?: FindManyOptions): Promise;\n  remove(data: T): Promise;\n  delete(id: string | number): Promise;\n  findWithRelations(relations: FindManyOptions): Promise;\n  preload(entityLike: DeepPartial): Promise;\n  findOne(options: FindOneOptions): Promise;\n  upsert(data: DeepPartial, uniqueWhere?: FindOptionsWhere): Promise;\n  count(options?: FindManyOptions): Promise;\n  exists(where: FindOptionsWhere): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BcryptProvider.html":{"url":"injectables/BcryptProvider.html","title":"injectable - BcryptProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  BcryptProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/bcrypt.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                comparePasswords\n                            \n                            \n                                    Async\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        comparePasswords\n                        \n                    \n                \n            \n            \n                \n                        \n                    comparePasswords(bcryptDto: CompareBcryptDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/bcrypt.provider.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                bcryptDto\n                                            \n                                                            CompareBcryptDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(bcryptDto: HashBcryptDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/bcrypt.provider.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                bcryptDto\n                                            \n                                                            HashBcryptDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { compare, hash } from 'bcrypt';\nimport { CompareBcryptDTO, HashBcryptDTO } from '../dtos/bcrypt.dto';\n\n@Injectable()\nexport class BcryptProvider {\n  private readonly saltRounds = 12;\n  async hashPassword(bcryptDto: HashBcryptDTO): Promise {\n    return await hash(bcryptDto.password, this.saltRounds);\n  }\n\n  async comparePasswords(bcryptDto: CompareBcryptDTO): Promise {\n    return await compare(bcryptDto.password, bcryptDto.hashedPassword);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ClassConstructor.html":{"url":"interfaces/ClassConstructor.html","title":"interface - ClassConstructor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ClassConstructor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/serialize.interceptor.ts\n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  UseInterceptors,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n  Type,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { plainToClass } from 'class-transformer';\n\ninterface ClassConstructor {\n  new (...args: any[]);\n}\nexport function Serialize(dto: ClassConstructor) {\n  return UseInterceptors(new SerializerInterceptor(dto));\n}\n\nexport class SerializerInterceptor implements NestInterceptor {\n  constructor(private dto: Type) {}\n\n  intercept(contex: ExecutionContext, next: CallHandler): Observable {\n    return next.handle().pipe(\n      map((data: any) => {\n        return plainToClass(this.dto, data, { excludeExtraneousValues: true });\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CompareBcryptDTO.html":{"url":"classes/CompareBcryptDTO.html","title":"class - CompareBcryptDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CompareBcryptDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/bcrypt.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            HashBcryptDTO\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                hashedPassword\n                            \n                            \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        hashedPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/bcrypt.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         HashBcryptDTO\n\n                            \n                        \n                    \n                        \n                                Defined in         HashBcryptDTO:7\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from 'class-validator';\n\nexport class HashBcryptDTO {\n  @IsString()\n  password: string;\n}\n\nexport class CompareBcryptDTO extends HashBcryptDTO {\n  @IsString()\n  hashedPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CustomThrottlerGuard.html":{"url":"injectables/CustomThrottlerGuard.html","title":"injectable - CustomThrottlerGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  CustomThrottlerGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/guards/throttle.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ThrottlerGuard\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                    Async\n                                shouldSkip\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Async\n                        shouldSkip\n                        \n                    \n                \n            \n            \n                \n                        \n                    shouldSkip(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/guards/throttle.guard.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, ExecutionContext } from '@nestjs/common';\nimport { ThrottlerGuard } from '@nestjs/throttler';\n\n@Injectable()\nexport class CustomThrottlerGuard extends ThrottlerGuard {\n  protected async shouldSkip(context: ExecutionContext): Promise {\n    const nodeEnv = process.env.NODE_ENV;\n    if (nodeEnv === 'development') return true;\n    return super.shouldSkip(context);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        /** @format */\n\nimport { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ConfigService } from '@nestjs/config';\nimport { User } from 'src/auth/entities/user.entity';\nimport { join } from 'path';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: (configService: ConfigService) => {\n        const isDevelopment = configService.get('NODE_ENV') === 'development';\n\n        return {\n          type: 'postgres',\n          host: isDevelopment\n            ? configService.get('DB_HOST_DEV')\n            : configService.get('DB_HOST_PROD'),\n          port: Number(\n            isDevelopment ? configService.get('DB_PORT_DEV') : configService.get('DB_PORT_PROD'),\n          ),\n          username: isDevelopment\n            ? configService.get('DB_USERNAME_DEV')\n            : configService.get('DB_USERNAME_PROD'),\n          password: isDevelopment\n            ? configService.get('DB_PASSWORD_DEV')\n            : configService.get('DB_PASSWORD_PROD'),\n          database: isDevelopment\n            ? configService.get('DB_NAME_DEV')\n            : configService.get('DB_NAME_PROD'),\n          entities: [\n            configService.get('NODE_ENV') === 'production'\n              ? join(__dirname, '../**/*.entity.js')\n              : join(__dirname, '../**/*.entity.ts'),\n          ],\n          migrations: [\n            configService.get('NODE_ENV') === 'production'\n              ? join(__dirname, './migrations/*.js')\n              : join(__dirname, './migrations/*.ts'),\n          ],\n          synchronize: false,\n          logging: isDevelopment,\n          autoLoadEntities: true,\n        };\n      },\n      inject: [ConfigService],\n    }),\n\n    TypeOrmModule.forFeature([User]),\n  ],\n  exports: [TypeOrmModule.forFeature([User])],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/HasId.html":{"url":"interfaces/HasId.html","title":"interface - HasId","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  HasId\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/repository/abstract.repository.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Logger } from '@nestjs/common';\nimport { BaseInterfaceRepository } from 'src/database/interfaces/base.interface';\nimport {\n  DeepPartial,\n  FindManyOptions,\n  FindOneOptions,\n  FindOptionsWhere,\n  Repository,\n} from 'typeorm';\n\ninterface HasId {\n  id: number;\n}\n\nexport abstract class BaseAbstractRepostitory\n  implements BaseInterfaceRepository\n{\n  protected readonly logger: Logger;\n  private entity: Repository;\n\n  protected constructor(entity: Repository, context?: string) {\n    this.entity = entity;\n    this.logger = new Logger(context || `📊 DATABASE:${entity.metadata.name}-Repository`);\n  }\n\n  public async save(data: DeepPartial): Promise {\n    try {\n      const saved = await this.entity.save(data);\n      this.logger.log(`✅ Save : Item saved successfully`);\n      return saved;\n    } catch (error) {\n      this.handleError('Save', error);\n      throw error;\n    }\n  }\n\n  public async saveMany(data: DeepPartial[]): Promise {\n    try {\n      const saved = await this.entity.save(data);\n      this.logger.log(`✅ Save Many : ${saved.length} items saved successfully`);\n      return saved;\n    } catch (error) {\n      this.handleError('Batch Save', error);\n      throw error;\n    }\n  }\n\n  public create(data: DeepPartial): T {\n    return this.entity.create(data);\n  }\n\n  public createMany(data: DeepPartial[]): T[] {\n    return this.entity.create(data);\n  }\n\n  public async findOneById(id: number): Promise {\n    try {\n      const options: FindOptionsWhere = { id } as FindOptionsWhere;\n      const result = await this.entity.findOneBy(options);\n\n      if (!result) {\n        this.logger.warn(`⚠️ Find One By ID : Item with id ${id} not found`);\n      }\n\n      return result;\n    } catch (error) {\n      this.handleError(`Find One By ID : ${id}`, error);\n      throw error;\n    }\n  }\n\n  public async findByCondition(filterCondition: FindOneOptions): Promise {\n    try {\n      return await this.entity.findOne(filterCondition);\n    } catch (error) {\n      this.handleError('Find By Condition', error);\n      throw error;\n    }\n  }\n\n  public async findWithRelations(relations: FindManyOptions): Promise {\n    try {\n      return await this.entity.find(relations);\n    } catch (error) {\n      this.handleError('Find With Relations', error);\n      throw error;\n    }\n  }\n\n  public async findAll(options?: FindManyOptions): Promise {\n    try {\n      return await this.entity.find(options);\n    } catch (error) {\n      this.handleError('Find All', error);\n      throw error;\n    }\n  }\n\n  public async remove(data: T): Promise {\n    try {\n      const removed = await this.entity.remove(data);\n      this.logger.log(`✅ Remove : Item with id ${data.id} deleted successfully`);\n      return removed;\n    } catch (error) {\n      this.handleError(`Delete : ${data.id}`, error);\n      throw error;\n    }\n  }\n\n  public async delete(id: number): Promise {\n    try {\n      await this.entity.delete(id);\n      this.logger.log(`✅ Delete : Item with id ${id} deleted successfully`);\n    } catch (error) {\n      this.handleError(`Delete : ${id}`, error);\n      throw error;\n    }\n  }\n\n  public async preload(entityLike: DeepPartial): Promise {\n    try {\n      return await this.entity.preload(entityLike);\n    } catch (error) {\n      this.handleError('Preload', error);\n      throw error;\n    }\n  }\n\n  public async findOne(options: FindOneOptions): Promise {\n    try {\n      return await this.entity.findOne(options);\n    } catch (error) {\n      this.handleError('Find One', error);\n      throw error;\n    }\n  }\n\n  public async upsert(data: DeepPartial, uniqueWhere?: FindOptionsWhere): Promise {\n    try {\n      if (uniqueWhere) {\n        const existing = await this.entity.findOneBy(uniqueWhere);\n\n        if (existing) {\n          const merged = this.entity.merge(existing, data);\n          const updated = await this.entity.save(merged);\n          this.logger.log(`✅ Upsert : Item updated successfully`);\n          return updated;\n        }\n      }\n\n      const dataWithId = data as T;\n      if (dataWithId.id) {\n        const existing = await this.findOneById(dataWithId.id);\n        if (existing) {\n          const merged = this.entity.merge(existing, data);\n          const updated = await this.entity.save(merged);\n          this.logger.log(`✅ Upsert : Item with id ${dataWithId.id} updated`);\n          return updated;\n        }\n      }\n\n      const created = await this.entity.save(data);\n      this.logger.log(`✅ Upsert : Item created successfully`);\n      return created;\n    } catch (error) {\n      this.handleError('Upsert', error);\n      throw error;\n    }\n  }\n\n  public async count(options?: FindManyOptions): Promise {\n    try {\n      return await this.entity.count(options);\n    } catch (error) {\n      this.handleError('Count', error);\n      throw error;\n    }\n  }\n\n  public async exists(where: FindOptionsWhere): Promise {\n    try {\n      const count = await this.entity.countBy(where);\n      return count > 0;\n    } catch (error) {\n      this.handleError('Exists', error);\n      throw error;\n    }\n  }\n\n  protected handleError(operation: string, error: unknown): void {\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    this.logger.error(`💥 Handle Error : ${operation}: ${errorMessage}`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HashBcryptDTO.html":{"url":"classes/HashBcryptDTO.html","title":"class - HashBcryptDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HashBcryptDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/bcrypt.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/bcrypt.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from 'class-validator';\n\nexport class HashBcryptDTO {\n  @IsString()\n  password: string;\n}\n\nexport class CompareBcryptDTO extends HashBcryptDTO {\n  @IsString()\n  hashedPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload.html":{"url":"interfaces/JwtPayload.html","title":"interface - JwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interfaces/jwt-payload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface JwtPayload {\n  id: number;\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtProvider.html":{"url":"injectables/JwtProvider.html","title":"injectable - JwtProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/jwt.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                generateAccessToken\n                            \n                            \n                                    Public\n                                generateRefreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/jwt.provider.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        generateAccessToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateAccessToken(payload: JwtPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/jwt.provider.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            JwtPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        generateRefreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateRefreshToken(payload: JwtPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/jwt.provider.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            JwtPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { JwtPayload } from '../interfaces/jwt-payload.interface';\n\n@Injectable()\nexport class JwtProvider {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly jwtService: JwtService,\n  ) {}\n\n  public generateAccessToken(payload: JwtPayload): string {\n    return this.jwtService.sign(payload);\n  }\n\n  public generateRefreshToken(payload: JwtPayload): string {\n    const refreshTokenSecret = this.configService.get('JWT_REFRESH_SECRET')!;\n    const refreshTokenExpiresIn = this.configService.get('JWT_REFRESH_EXPIRES_IN')!;\n    return this.jwtService.sign(payload, {\n      secret: refreshTokenSecret,\n      expiresIn: refreshTokenExpiresIn,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy, 'jwt')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userRepository: UserRepository)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt.strategy.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: JwtPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategies/jwt.strategy.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            JwtPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, UnauthorizedException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { IsNull } from 'typeorm';\nimport { User } from '../entities/user.entity';\nimport { JwtPayload } from '../interfaces/jwt-payload.interface';\nimport { UserRepository } from '../repositories/user.repository';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy, 'jwt') {\n  private readonly logger = new Logger('🔐 AUTH : JWT-Strategy');\n\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly userRepository: UserRepository,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: configService.get('JWT_SECRET')!,\n    });\n\n    this.logger.log('Initialized');\n  }\n\n  public async validate(payload: JwtPayload) {\n    this.validatePayload(payload);\n    const user = await this.findUserById(payload.id);\n    this.ensureUserExists(user);\n    return this.sanitizeUser(user);\n  }\n\n  private validatePayload(payload: JwtPayload) {\n    if (!payload || !payload.id || !payload.email) {\n      this.logger.warn(`Invalid payload`);\n      throw new UnauthorizedException('Invalid token payload');\n    }\n    this.logger.log(`Payload validated for user ID: ${payload.id}`);\n  }\n\n  private async findUserById(userId: number): Promise {\n    const user = await this.userRepository.findOne({ where: { id: userId, deletedAt: IsNull() } });\n    this.logger.log(`Validating JWT for user ID: ${user?.id}`);\n    return user;\n  }\n\n  private ensureUserExists(user: User | null): asserts user is User {\n    if (!user) {\n      this.logger.warn(`User not found`);\n      throw new UnauthorizedException('Invalid token');\n    }\n  }\n\n  private sanitizeUser(user: User): Omit {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { password: __, deletedAt: ___, ...result } = user;\n    this.logger.log(`User validated successfully`);\n    return result;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDTO.html":{"url":"classes/LoginDTO.html","title":"class - LoginDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/base-auth.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            BaseAuthDTO\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/base-auth.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BaseAuthDTO\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseAuthDTO:9\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsString, IsStrongPassword } from 'class-validator';\n\nclass BaseAuthDTO {\n  @IsString()\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n}\n\nexport class RegisterDTO extends BaseAuthDTO {\n  @IsNotEmpty()\n  @IsString()\n  @IsStrongPassword()\n  password: string;\n}\n\nexport class LoginDTO extends BaseAuthDTO {\n  @IsNotEmpty()\n  @IsString()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LoginResponse.html":{"url":"interfaces/LoginResponse.html","title":"interface - LoginResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LoginResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/responses/login.response.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            accessToken\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            statusCode\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accessToken\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        accessToken:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        statusCode:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface LoginResponse {\n  message: string;\n  statusCode: number;\n  accessToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDTO.html":{"url":"classes/RegisterDTO.html","title":"class - RegisterDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/base-auth.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            BaseAuthDTO\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@IsStrongPassword()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/base-auth.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BaseAuthDTO\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseAuthDTO:9\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsString, IsStrongPassword } from 'class-validator';\n\nclass BaseAuthDTO {\n  @IsString()\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n}\n\nexport class RegisterDTO extends BaseAuthDTO {\n  @IsNotEmpty()\n  @IsString()\n  @IsStrongPassword()\n  password: string;\n}\n\nexport class LoginDTO extends BaseAuthDTO {\n  @IsNotEmpty()\n  @IsString()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RegisterResponse.html":{"url":"interfaces/RegisterResponse.html","title":"interface - RegisterResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RegisterResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/responses/register.response.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            statusCode\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        statusCode:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface RegisterResponse {\n  message: string;\n  statusCode: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SerializerInterceptor.html":{"url":"classes/SerializerInterceptor.html","title":"class - SerializerInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SerializerInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/serialize.interceptor.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        NestInterceptor\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dto: Type)\n                    \n                \n                        \n                            \n                                Defined in src/common/interceptors/serialize.interceptor.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dto\n                                                  \n                                                        \n                                                                    Type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(contex: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/interceptors/serialize.interceptor.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                contex\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  UseInterceptors,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n  Type,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { plainToClass } from 'class-transformer';\n\ninterface ClassConstructor {\n  new (...args: any[]);\n}\nexport function Serialize(dto: ClassConstructor) {\n  return UseInterceptors(new SerializerInterceptor(dto));\n}\n\nexport class SerializerInterceptor implements NestInterceptor {\n  constructor(private dto: Type) {}\n\n  intercept(contex: ExecutionContext, next: CallHandler): Observable {\n    return next.handle().pipe(\n      map((data: any) => {\n        return plainToClass(this.dto, data, { excludeExtraneousValues: true });\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                deletedAt\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Date | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/entities/user.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/entities/user.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/entities/user.entity.ts:12\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        /** @format */\n\nimport { Column, DeleteDateColumn, Entity } from 'typeorm';\nimport { BaseEntity } from '../../database/entities/base.entity';\n\n@Entity({ name: 'users' })\nexport class User extends BaseEntity {\n  @Column({ type: 'varchar', length: 255, unique: true })\n  email: string;\n\n  @Column({ type: 'varchar', length: 255 })\n  password: string;\n\n  @DeleteDateColumn({ type: 'timestamp', nullable: true })\n  deletedAt: Date | null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserRepository.html":{"url":"injectables/UserRepository.html","title":"injectable - UserRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  UserRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/repositories/user.repository.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            BaseAbstractRepostitory\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findByEmail\n                            \n                            \n                                    Public\n                                    Async\n                                count\n                            \n                            \n                                    Public\n                                create\n                            \n                            \n                                    Public\n                                createMany\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                exists\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findByCondition\n                            \n                            \n                                    Public\n                                    Async\n                                findOne\n                            \n                            \n                                    Public\n                                    Async\n                                findOneById\n                            \n                            \n                                    Public\n                                    Async\n                                findWithRelations\n                            \n                            \n                                    Protected\n                                handleError\n                            \n                            \n                                    Public\n                                    Async\n                                preload\n                            \n                            \n                                    Public\n                                    Async\n                                remove\n                            \n                            \n                                    Public\n                                    Async\n                                save\n                            \n                            \n                                    Public\n                                    Async\n                                saveMany\n                            \n                            \n                                    Public\n                                    Async\n                                upsert\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/auth/repositories/user.repository.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/repositories/user.repository.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        count\n                        \n                    \n                \n            \n            \n                \n                        \n                    count(options?: FindManyOptions)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseAbstractRepostitory\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseAbstractRepostitory:173\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                        FindManyOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(data: DeepPartial)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseAbstractRepostitory\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseAbstractRepostitory:50\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        DeepPartial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     T\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        createMany\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMany(data: DeepPartial[])\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseAbstractRepostitory\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseAbstractRepostitory:54\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        DeepPartial[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     T[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseAbstractRepostitory\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseAbstractRepostitory:112\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        exists\n                        \n                    \n                \n            \n            \n                \n                        \n                    exists(where: FindOptionsWhere)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseAbstractRepostitory\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseAbstractRepostitory:182\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                where\n                                            \n                                                        FindOptionsWhere\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(options?: FindManyOptions)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseAbstractRepostitory\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseAbstractRepostitory:92\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                        FindManyOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findByCondition\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByCondition(filterCondition: FindOneOptions)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseAbstractRepostitory\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseAbstractRepostitory:74\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                filterCondition\n                                            \n                                                        FindOneOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(options: FindOneOptions)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseAbstractRepostitory\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseAbstractRepostitory:131\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                        FindOneOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: number)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseAbstractRepostitory\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseAbstractRepostitory:58\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findWithRelations\n                        \n                    \n                \n            \n            \n                \n                        \n                    findWithRelations(relations: FindManyOptions)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseAbstractRepostitory\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseAbstractRepostitory:83\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                relations\n                                            \n                                                        FindManyOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        handleError\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleError(operation: string, error)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseAbstractRepostitory\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseAbstractRepostitory:192\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                operation\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                error\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        preload\n                        \n                    \n                \n            \n            \n                \n                        \n                    preload(entityLike: DeepPartial)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseAbstractRepostitory\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseAbstractRepostitory:122\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                entityLike\n                                            \n                                                        DeepPartial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(data: T)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseAbstractRepostitory\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseAbstractRepostitory:101\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        save\n                        \n                    \n                \n            \n            \n                \n                        \n                    save(data: DeepPartial)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseAbstractRepostitory\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseAbstractRepostitory:28\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        DeepPartial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        saveMany\n                        \n                    \n                \n            \n            \n                \n                        \n                    saveMany(data: DeepPartial[])\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseAbstractRepostitory\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseAbstractRepostitory:39\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        DeepPartial[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        upsert\n                        \n                    \n                \n            \n            \n                \n                        \n                    upsert(data: DeepPartial, uniqueWhere?: FindOptionsWhere)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseAbstractRepostitory\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseAbstractRepostitory:140\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        DeepPartial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                uniqueWhere\n                                            \n                                                        FindOptionsWhere\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseAbstractRepostitory\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseAbstractRepostitory:20\n\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from 'src/auth/entities/user.entity';\nimport { BaseAbstractRepostitory } from 'src/database/repository/abstract.repository';\nimport { Repository } from 'typeorm';\nimport { UserRepositoryInterface } from '../interfaces/user.interface';\n\n@Injectable()\nexport class UserRepository\n  extends BaseAbstractRepostitory\n  implements UserRepositoryInterface\n{\n  constructor(\n    @InjectRepository(User)\n    private readonly userRepository: Repository,\n  ) {\n    super(userRepository, '👤 AUTH:User-Repository');\n  }\n\n  async findByEmail(email: string): Promise {\n    try {\n      return await this.userRepository.findOne({\n        where: {\n          email,\n        },\n        withDeleted: true,\n      });\n    } catch (error) {\n      this.handleError(`finding user by email ${email}`, error);\n      throw error;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserRepositoryInterface.html":{"url":"interfaces/UserRepositoryInterface.html","title":"interface - UserRepositoryInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserRepositoryInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interfaces/user.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            BaseInterfaceRepository\n            \n\n\n\n\n    \n\n\n    \n        import { BaseInterfaceRepository } from '../../database/interfaces/base.interface';\nimport { User } from '../entities/user.entity';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface UserRepositoryInterface extends BaseInterfaceRepository {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                        src/auth/controllers/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/auth/dtos/base-auth.dto.ts\n            \n            class\n            BaseAuthDTO\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/auth/dtos/base-auth.dto.ts\n            \n            class\n            LoginDTO\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/auth/dtos/base-auth.dto.ts\n            \n            class\n            RegisterDTO\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/auth/dtos/bcrypt.dto.ts\n            \n            class\n            CompareBcryptDTO\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/auth/dtos/bcrypt.dto.ts\n            \n            class\n            HashBcryptDTO\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/auth/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/guards/jwt.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/interfaces/jwt-payload.interface.ts\n            \n            interface\n            JwtPayload\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/auth/interfaces/user.interface.ts\n            \n            interface\n            UserRepositoryInterface\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/auth/providers/bcrypt.provider.ts\n            \n            injectable\n            BcryptProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/auth/providers/jwt.provider.ts\n            \n            injectable\n            JwtProvider\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/auth/repositories/user.repository.ts\n            \n            injectable\n            UserRepository\n            \n                0 %\n                (0/20)\n            \n        \n        \n            \n                \n                        src/auth/responses/login.response.ts\n            \n            interface\n            LoginResponse\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/auth/responses/register.response.ts\n            \n            interface\n            RegisterResponse\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/common/guards/throttle.guard.ts\n            \n            injectable\n            CustomThrottlerGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/common/interceptors/serialize.interceptor.ts\n            \n            class\n            SerializerInterceptor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/common/interceptors/serialize.interceptor.ts\n            \n            interface\n            ClassConstructor\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/interceptors/serialize.interceptor.ts\n            \n            function\n            Serialize\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/database/entities/base.entity.ts\n            \n            class\n            BaseEntity\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/database/interfaces/base.interface.ts\n            \n            interface\n            BaseInterfaceRepository\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                        src/database/migrations/1761088297244-AddBaseEntity.ts\n            \n            class\n            AddBaseEntity1761088297244\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/database/repository/abstract.repository.ts\n            \n            class\n            BaseAbstractRepostitory\n            \n                0 %\n                (0/19)\n            \n        \n        \n            \n                \n                        src/database/repository/abstract.repository.ts\n            \n            interface\n            HasId\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            logHealthInfo\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            setupGlobalConfiguration\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            setupGracefulShutdown\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            variable\n            logger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/schemas/validate-env.zod.ts\n            \n            function\n            validateEnv\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/schemas/validate-env.zod.ts\n            \n            variable\n            envSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/schemas/validate-env.zod.ts\n            \n            type alias\n            EnvConfig\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^11.0.1\n        \n            @nestjs/config : ^4.0.2\n        \n            @nestjs/core : ^11.0.1\n        \n            @nestjs/jwt : ^11.0.1\n        \n            @nestjs/passport : ^11.0.5\n        \n            @nestjs/platform-express : ^11.0.1\n        \n            @nestjs/throttler : ^6.4.0\n        \n            @nestjs/typeorm : ^11.0.0\n        \n            bcrypt : ^6.0.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.2\n        \n            dotenv : ^17.2.3\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            pg : ^8.16.3\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.27\n        \n            zod : ^4.1.12\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            logHealthInfo   (src/.../main.ts)\n                        \n                        \n                            Serialize   (src/.../serialize.interceptor.ts)\n                        \n                        \n                            setupGlobalConfiguration   (src/.../main.ts)\n                        \n                        \n                            setupGracefulShutdown   (src/.../main.ts)\n                        \n                        \n                            validateEnv   (src/.../validate-env.zod.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logHealthInfo\n                        \n                    \n                \n            \n            \n                \nlogHealthInfo()\n                \n            \n\n\n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setupGlobalConfiguration\n                        \n                    \n                \n            \n            \n                \nsetupGlobalConfiguration(app: INestApplication)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                app\n                                            \n                                                        INestApplication\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setupGracefulShutdown\n                        \n                    \n                \n            \n            \n                \nsetupGracefulShutdown(app: INestApplication)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                app\n                                            \n                                                        INestApplication\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/common/interceptors/serialize.interceptor.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Serialize\n                        \n                    \n                \n            \n            \n                \nSerialize(dto: ClassConstructor)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            ClassConstructor\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/schemas/validate-env.zod.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        validateEnv\n                        \n                    \n                \n            \n            \n                \nvalidateEnv(config: Record)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                        Record\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"readme - index","body":"\n                   \n\n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ pnpm installCompile and run the project\nExample :# development\n$ pnpm run start\n\n# watch mode\n$ pnpm run start:dev\n\n# production mode\n$ pnpm run start:prodRun tests\nExample :# unit tests\n$ pnpm run test\n\n# e2e tests\n$ pnpm run test:e2e\n\n# test coverage\n$ pnpm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ pnpm install -g @nestjs/mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n\n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAuthModule -->\n\nDatabaseModule->AuthModule\n\n\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nCustomThrottlerGuard\n\nCustomThrottlerGuard\n\nAppModule -->\n\nCustomThrottlerGuard->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nBcryptProvider\n\nBcryptProvider\n\nAuthModule -->\n\nBcryptProvider->AuthModule\n\n\n\n\n\nJwtProvider\n\nJwtProvider\n\nAuthModule -->\n\nJwtProvider->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nUserRepository\n\nUserRepository\n\nAuthModule -->\n\nUserRepository->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Controller\n                \n            \n        \n        \n            \n                \n                    \n                    1 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    7 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    9 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    7 Interfaces\n                \n            \n        \n        \n            \n                \n                    \n                    \n                        0 \n                    \n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            EnvConfig   (src/.../validate-env.zod.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/schemas/validate-env.zod.ts\n    \n    \n        \n            \n                \n                    \n                    EnvConfig\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            envSchema   (src/.../validate-env.zod.ts)\n                        \n                        \n                            logger   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/schemas/validate-env.zod.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        envSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.object({\n  // Database development and production\n  DB_HOST_DEV: z.string().default('localhost'),\n  DB_PORT_DEV: z.string().transform(Number).pipe(z.number().positive()).default(5432),\n  DB_USERNAME_DEV: z.string().default('postgres'),\n  DB_PASSWORD_DEV: z.string().min(1),\n  DB_NAME_DEV: z.string().default('nestjs_auth'),\n\n  // Application\n  NESTJS_PORT: z.string().transform(Number).pipe(z.number().positive()).default(3000),\n  NODE_ENV: z.enum(['development', 'production', 'test']).default('development'),\n\n  // JWT\n  JWT_SECRET: z.string().min(32).max(1024),\n  JWT_EXPIRES_IN: z.string().default('1h'),\n  JWT_REFRESH_SECRET: z.string().min(32).max(1024),\n  JWT_REFRESH_EXPIRES_IN: z\n    .string()\n    .default('604800')\n    .transform((t) => Number(t)),\n  JWT_ISSUER: z.string().default(`http://localhost:${process.env.NESTJS_PORT ?? 3000}`),\n  JWT_AUDIENCE: z.string().default('nestjs-auth-jwt'),\n})\n                    \n                \n\n\n        \n    \n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger('🔐 AUTH-API')\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
